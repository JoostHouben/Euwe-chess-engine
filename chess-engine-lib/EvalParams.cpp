#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        0.204272,    1.000000,    1.892669,    3.755643,    8.460752,    0.000000,    98.113228,
        86.065857,   414.937195,  244.921310,  423.672577,  269.193268,  551.962769,  500.275696,
        1663.232422, 573.356689,  0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -28.849205,
        23.453621,   -23.164913,  7.752540,    -29.189405,  8.033377,    -23.963152,  -42.196930,
        -4.600659,   3.767446,    17.307806,   -7.798296,   40.829281,   -13.815878,  -13.644834,
        -11.081969,  -20.307383,  17.042627,   -14.343066,  3.239564,    -9.847266,   -2.496867,
        -9.177529,   -1.644812,   -12.966347,  -6.012612,   12.821834,   -5.373832,   42.846905,
        -19.390385,  3.555008,    -6.333462,   -14.919677,  16.076733,   -13.285691,  21.029608,
        -0.825396,   2.591451,    15.426396,   -25.907160,  -0.968390,   -7.494271,   18.264765,
        -5.571054,   1.362342,    -2.662433,   -16.260101,  0.010903,    -14.285413,  47.157234,
        -5.904953,   24.226534,   -10.834409,  10.626553,   5.271305,    -3.258761,   18.926176,
        -6.638061,   0.692438,    -8.052096,   4.565879,    2.487719,    -6.450275,   -1.207029,
        -11.435862,  46.055939,   39.457371,   14.136128,   -1.360984,   18.165705,   17.130119,
        -18.514647,  48.503345,   -29.383545,  63.683647,   -16.763523,  143.434021,  -6.238347,
        86.899147,   -30.047174,  207.849472,  64.722565,   133.469040,  79.270256,   88.321594,
        66.057991,   151.830368,  45.283684,   60.150097,   90.336411,   49.020916,   69.781433,
        30.579216,   131.182068,  47.794262,   69.186172,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -215.451248,
        -16.612543,  -37.039013,  -61.573895,  -42.940239,  -14.246618,  -37.621346,  -12.961573,
        -30.514877,  -33.668385,  -9.990315,   -38.621780,  -59.714840,  -56.721432,  -172.919586,
        -58.895710,  -57.038197,  -44.364193,  -72.017273,  8.318718,    -24.496632,  -26.758146,
        -3.978644,   7.680517,    -6.797475,   -6.580432,   18.107916,   -15.976336,  -20.879814,
        -49.522617,  -35.126900,  -20.117002,  -49.557373,  -33.852909,  -15.659996,  1.018906,
        -5.014768,   -4.501211,   5.089646,    8.972736,    51.453674,   -0.658930,   4.757128,
        -20.221567,  7.006396,    -20.805872,  -56.948227,  14.349194,   -20.936144,  -12.978296,
        -28.169010,  8.127572,    22.545010,   19.459641,   -0.933492,   31.231623,   19.723705,
        24.002615,   17.375629,   8.231718,    17.799349,   15.210497,   1.504459,    0.588511,
        -17.067909,  -14.050528,  16.469978,   3.886590,    52.062901,   11.147216,   61.061855,
        19.847803,   26.993052,   25.635988,   70.212547,   11.863164,   -4.886793,   25.511671,
        41.877377,   -31.203478,  -9.759770,   -15.852625,  12.041582,   5.523532,    48.619087,
        24.360659,   89.556297,   6.193169,    114.477760,  -19.517973,  150.019623,  -22.247572,
        48.806343,   12.796025,   5.831359,    8.450008,    -85.896812,  17.246231,   -35.107464,
        1.822853,    -2.725985,   15.111734,   63.019894,   15.214888,   53.372963,   -10.878656,
        38.685978,   2.346754,    -29.674360,  -27.338625,  62.938580,   -32.172325,  -194.678635,
        -31.878801,  -182.350128, -3.483150,   -33.118252,  -20.938833,  -15.026789,  -32.302124,
        -69.244453,  17.895744,   -164.812057, 12.399291,   122.360229,  -27.256651,  -237.167038,
        -74.276382,  -14.891335,  -39.838055,  12.577639,   -50.418140,  -2.404974,   -28.061537,
        -24.338253,  -3.521317,   31.460009,   -33.668655,  -25.438015,  -37.669617,  -66.580574,
        -0.169364,   -4.035440,   -17.110695,  9.899323,    -29.817278,  0.623193,    -14.450740,
        16.544434,   -10.763014,  -1.078035,   6.205232,    5.013679,    -21.033941,  -7.291753,
        -0.351429,   26.649199,   -39.772678,  -45.576817,  -61.144306,  9.075814,    -18.337862,
        11.487742,   5.090779,    6.305015,    -1.610270,   -2.179077,   -0.382226,   2.975510,
        9.067516,    11.538915,   -7.794897,   -1.639986,   -6.106788,   18.730247,   -47.462017,
        13.801928,   -2.614891,   2.006672,    10.064410,   -5.626492,   21.704237,   30.168262,
        10.907728,   12.846349,   4.515601,    -4.307258,   6.631185,    -12.670989,  20.576832,
        5.440682,    -17.992882,  -6.748446,   -5.489773,   -19.902035,  16.403891,   6.488986,
        8.225754,    23.169327,   25.453833,   46.485821,   6.920824,    1.681044,    4.424819,
        -29.542250,  23.049786,   -65.266113,  32.567734,   -3.630048,   4.025312,    11.128631,
        6.557414,    6.442935,    16.401604,   5.572615,    2.580896,    46.147938,   13.530612,
        125.189255,  2.919575,    102.594162,  -12.488626,  22.814133,   2.534603,    18.473970,
        -10.355933,  -34.349648,  27.638935,   1.771532,    16.426729,   9.025492,    28.209358,
        8.259949,    4.082183,    -35.738159,  22.532860,   -70.849472,  15.733583,   -82.868629,
        25.760595,   -213.604324, 100.142616,  13.387142,   6.012747,    -17.762873,  -1.413830,
        -24.545130,  8.554545,    -13.130689,  8.509965,    -154.026840, 10.026988,   196.458649,
        -6.357707,   -48.787895,  -21.282427,  23.946032,   -29.472492,  9.401417,    -31.296656,
        -0.045175,   -13.893247,  -0.367436,   -18.641277,  -7.318244,   -17.363293,  -7.648225,
        -16.601553,  -7.818032,   -23.321575,  -18.659132,  -49.481693,  -48.748806,  4.469669,
        -28.433470,  -6.993001,   -25.176733,  -11.573261,  -10.377875,  -12.740057,  -14.931941,
        -13.579026,  -34.036865,  -2.259807,   -27.725092,  -21.432081,  -46.376820,  -18.390133,
        -14.478549,  -10.981582,  -42.951748,  8.778869,    -40.749752,  10.848987,   -18.150602,
        -10.006725,  -47.307476,  4.518603,    -38.554031,  -12.043906,  -19.311064,  -25.098577,
        -33.086552,  0.646874,    -30.870245,  15.315107,   -37.754967,  21.959309,   -53.344219,
        26.576206,   -24.207098,  16.582394,   -50.888355,  21.781654,   -45.778057,  16.673828,
        -40.521503,  -0.834442,   -51.590313,  13.956964,   -39.656101,  26.476269,   -33.427464,
        24.816175,   -49.224712,  34.070065,   -14.213435,  20.770470,   -108.202835, 52.427513,
        -3.743110,   10.886729,   -14.126735,  14.534979,   -89.416397,  35.854904,   -32.511765,
        35.857906,   -24.501787,  28.851902,   -22.293592,  24.424614,   9.219151,    12.213220,
        -2.183730,   21.656767,   21.595758,   7.922066,    133.635223,  -16.379995,  -24.690748,
        13.987813,   -14.836650,  24.559523,   -4.180295,   30.116203,   -0.887486,   32.975159,
        16.742102,   26.254305,   19.958502,   24.052042,   53.713947,   12.421582,   70.226334,
        8.401667,    33.147045,   8.740995,    29.848408,   -8.032353,   20.905380,   20.911352,
        -4.517610,   36.747593,   32.122406,   25.818045,   32.793827,   33.754578,   68.919937,
        24.989676,   117.878639,  4.642528,    23.167683,   8.288738,    41.517651,   -100.055244,
        12.129952,   -29.148958,  10.137826,   -41.550018,  27.003965,   -29.821455,  39.777046,
        -84.548065,  29.137213,   -122.848846, 36.627506,   -161.254227, -48.006317,  -33.769871,
        -22.992971,  -5.664862,   -10.889037,  7.231988,    1.337495,    -22.517111,  0.232301,
        -9.231657,   12.367043,   -36.329090,  21.700716,   -83.566170,  28.612608,   -165.198441,
        -8.862342,   -130.567032, -5.200278,   -38.477016,  -30.819845,  8.348013,    -40.719276,
        8.657427,    -20.356245,  -22.543598,  -9.081496,   -32.602207,  -20.792280,  -3.408595,
        5.813814,    -39.391018,  -25.087713,  -12.396211,  -30.863195,  25.398060,   -17.679876,
        -8.519740,   -61.094444,  33.938332,   -55.713997,  30.831062,   -59.011955,  35.417847,
        -13.727721,  -3.317171,   -54.990669,  39.305779,   -46.846756,  52.065384,   -27.775633,
        17.384054,   -41.984238,  20.470331,   -54.697945,  50.392410,   -68.871910,  32.585503,
        -54.246605,  29.885988,   -50.978462,  28.185349,   -67.194130,  72.770500,   -48.595161,
        60.821411,   -11.046988,  -5.539392,   -12.499442,  1.935343,    -76.289864,  53.261154,
        -88.142784,  56.620369,   -87.142113,  89.555748,   26.679308,   -4.165096,   19.585924,
        -35.639759,  -57.982323,  69.342957,   1.941301,    3.532078,    -77.596962,  89.689095,
        -53.281120,  68.342583,   -93.696098,  83.510681,   -90.686058,  77.594513,   -69.313240,
        55.764267,   -31.191771,  -5.050877,   -15.134254,  44.123550,   12.043473,   43.350216,
        29.216364,   16.171415,   -85.210579,  91.159355,   -82.366798,  68.312584,   12.442780,
        11.887610,   224.339630,  -152.493408, -8.208632,   64.153763,   190.155807,  -82.999588,
        -38.523212,  -20.723244,  33.308315,   -48.757568,  -6.466987,   -0.329840,   -78.992554,
        -0.051640,   1.522091,    -27.739531,  -57.139668,  -6.596828,   4.973186,    -30.133549,
        -30.745724,  -52.011768,  -32.273739,  -24.431040,  -19.331623,  -14.170300,  15.464383,
        -9.306925,   -23.726248,  15.518254,   0.465699,    5.021360,    14.663813,   -2.289197,
        12.596885,   -1.298132,   10.448237,   -35.690689,  -74.122444,  -22.018715,  21.047337,
        -21.359793,  40.816525,   -7.543036,   34.387047,   16.931883,   -20.128576,  27.972652,
        -6.002882,   15.801870,   -20.887199,  3.318579,    -56.315594,  -5.197834,   34.533634,
        -25.046116,  -40.929924,  8.346232,    53.300140,   20.081411,   8.109933,    32.070656,
        5.191108,    28.797922,   -23.008141,  29.112068,   -58.816162,  25.738115,   -34.143383,
        -9.112228,   -44.823055,  2.104879,    -125.708702, 51.003880,   -72.765640,  46.901855,
        -111.554817, 51.156162,   -107.068184, 49.595818,   -96.039246,  47.439209,   16.669825,
        29.790400,   -8.523983,   7.009899,    41.251385,   -2.890534,   20.563213,   27.453913,
        31.562826,   42.479454,   -117.968231, 60.586128,   -186.837524, 68.637978,   -50.178230,
        57.575687,   -159.048294, 71.618958,   -173.375870, 33.676388,   -32.857140,  11.988123,
        -84.318878,  41.363461,   27.598045,   15.268552,   -30.938942,  44.655891,   36.190941,
        29.826448,   -14.303454,  38.831219,   -71.275665,  46.635029,   -348.808929, 56.796028,
        213.397690,  -42.714447,  122.416580,  -16.262001,  128.553268,  -41.155029,  44.985317,
        -32.495426,  214.412415,  -45.498718,  125.815453,  -22.430573,  -2.056665,   23.391600,
        -538.091858, -27.077642,  0.000000,    0.000000,    90.000000,   90.000000,   76.347626,
        112.299263,  35.645786,   63.463196,   -6.839235,   39.923553,   -6.362265,   11.941430,
        -4.111854,   13.989727,   22.864727,   13.647035,   13.604010,   8.453722,    48.555393,
        -24.474987,  11.942908,   16.560614,   7.705549,    20.338127,   2.216023,    9.587556,
        0.000000,    0.000000,    -0.189847,   -12.371914,  -8.942625,   -17.030411,  -25.287315,
        14.633395,   -27.428497,  -94.565086,  20.840544,   73.585983,   8.782774,    4.236367,
        -21.822542,  17.767082,   26.064316,   8.848715,    40.479088,   -3.989802,   -429.437134,
        2.006016,    50.604504,   -30.429466,  11.970440,   -10.883787,  16.264969,   -3.520014,
        0.000000,    0.000000,    10.600561,   11.290385,   8.901792,    30.766109,   5.896039,
        57.667660,   4.454654,    106.141159,  249.864716,  -127.235924, 42.755638,   -48.004211,
        -10.435757,  -13.592072,  -18.472214,  -0.438751,   0.000000,    0.000000,    -9.122165,
        11.699911,   -3.666977,   20.557653,   3.449275,    27.020885,   17.232203,   24.294987,
        2.639368,    1.783534,    0.000000,    0.000000,    0.419457,    2.703379,    3.620893,
        4.163189,    3.622866,    3.311039,    1.512264,    6.445375,    0.000000,    0.000000,
        0.000000,    0.000000,    4.666712,    -2.777380,   3.699127,    -4.456894,   10.467671,
        -7.327818,   24.819506,   3.210970,    0.000000,    0.000000,    20.000000,   10.000000,
        5.314967,    -2.776032,   -7.973701,   -50.862671,  16.594332,   -23.380789,  10.125549,
        5.109147,    -61.511822,  -26.568119,  -1.864337,   -16.533670,  7.604366,    6.616108,
        -31.910006,  -39.839630,  -14.247726,  -13.992418,  4.418085,    10.725561,   -65.448120,
        -6.378068,   -16.384859,  0.243186,    3.654059,    17.429234,   -70.441719,  -35.129486,
        -53.987377,  -12.202868};

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorBonus:\n\t{}", arrayToString(params.bishopPawnSameColorBonus));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    oss << "\nkingTropismBonus: {\n";
    writeTaperedTermPerPiece(params.kingTropismBonus, oss);
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    return oss.str();
}
