#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        0.204272,    1.000000,    1.892669,    3.755643,   8.460752,    0.000000,    101.136375,
        73.634148,   383.493103,  254.741028,  388.963013, 259.758057,  513.735413,  498.476868,
        1561.354004, 605.677551,  0.000000,    0.000000,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,   0.000000,    0.000000,    -32.275970,
        19.054258,   -26.353096,  6.159061,    -24.906525, 8.501779,    -16.021505,  -47.938663,
        -15.374459,  -0.405951,   18.752356,   -3.311475,  31.068995,   -14.193051,  -14.692413,
        -6.515770,   -23.795313,  14.431427,   -14.232407, -2.920953,   -5.000241,   -3.878920,
        -2.045676,   5.583895,    -7.744422,   -5.357545,  18.452017,   -6.310839,   40.334320,
        -19.557125,  3.228877,    -1.729286,   -14.422685, 9.920200,    -7.943835,   12.077550,
        5.156132,    2.267471,    25.573362,   -26.956602, 6.796576,    -9.852021,   21.283693,
        -9.096616,   -3.397491,   1.290799,    -15.242424, -0.788533,   -14.369512,  40.756935,
        1.034324,    26.596218,   -9.090756,   8.079453,   12.008713,   1.276157,    29.691256,
        -13.707577,  8.950469,    -8.440213,   -11.767222, 6.599930,    -13.713883,  6.308659,
        4.488091,    49.656582,   17.565763,   22.776468,  -7.548483,   26.112001,   15.358214,
        -8.717010,   65.003563,   -32.918118,  62.350636,  -21.515644,  111.115685,  -1.517219,
        104.071762,  -28.461489,  191.467010,  53.066822,  144.839935,  60.190804,   57.903725,
        68.551582,   125.732513,  37.760689,   88.439659,  63.071922,   18.872080,   64.199341,
        -30.675608,  117.549042,  10.737432,   86.728851,  0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,   0.000000,    0.000000,    -124.039658,
        -57.488636,  -33.238861,  -85.000305,  -26.182671, -22.111931,  -26.366903,  -30.292837,
        -32.219364,  -49.878403,  -11.943177,  -42.128975, -24.207327,  -62.895874,  -97.830666,
        -71.586609,  -34.610321,  -66.514565,  -52.516930, -3.102812,   -24.599987,  -24.622564,
        -2.262899,   -5.822814,   -5.917565,   -12.588941, 7.676688,    -20.110128,  -42.965504,
        -46.314335,  -54.428467,  -31.575317,  -48.826477, -45.081070,  -16.399559,  -2.293613,
        -6.873666,   8.439669,    3.839325,    3.261749,   43.875393,   0.019130,    5.346762,
        -19.667559,  16.016529,   -16.455437,  -46.993217, 12.316122,   -7.682103,   -23.118061,
        -8.592525,   7.318862,    22.753555,   17.684923,  -1.688281,   28.511908,   24.618641,
        22.551352,   8.654430,    18.978081,   12.601696,  5.123866,    2.026878,    -13.552285,
        -27.868076,  -21.583090,  7.330047,    18.611460,  45.373371,   21.543699,   66.368843,
        22.124287,   7.025868,    35.555767,   53.546646,  18.685621,   -7.476076,   36.735138,
        9.816950,    -14.381777,  32.233627,   -29.380676, 9.729477,    2.771725,    46.290436,
        20.115641,   87.635132,   20.289080,   83.470505,  -1.760390,   145.130722,  -14.219176,
        4.176898,    9.116957,    -8.006157,   0.791804,   -103.240578, 21.619617,   -2.628158,
        -13.149784,  -3.282231,   23.094561,   63.525898,  -0.173650,   9.611155,    -6.753128,
        32.656837,   2.502617,    -35.937012,  -19.383585, 42.477684,   -32.392555,  -157.524841,
        -51.816372,  -114.458984, -33.169754,  7.971404,   -34.517330,  -521.432129, 52.476429,
        -115.606529, 26.459435,   -267.191162, 9.621574,   278.288788,  -36.946892,  -281.949036,
        -26.324884,  -25.029562,  -15.156622,  4.744388,   -26.547165,  -3.585861,   -37.034882,
        -30.580656,  -3.233185,   10.079615,   -33.891083, -22.425234,  -45.791904,  -59.744984,
        -13.874296,  2.069735,    -24.653559,  16.719257,  -39.108231,  9.463921,    -21.998348,
        16.864830,   -20.445917,  -0.136983,   2.543856,   -3.208541,   -15.928694,  9.391508,
        -10.141299,  19.389317,   -26.246044,  -30.708847, -58.098866,  8.341557,    -15.273689,
        10.119713,   5.791675,    14.216957,   -1.468306,  1.579422,    4.495594,    6.326806,
        10.162295,   7.151949,    -1.490065,   9.856430,   -3.055789,   21.560190,   -39.657276,
        15.921534,   -6.461322,   15.972887,   -2.601947,  -11.910159,  35.471889,   34.140259,
        12.281940,   12.373974,   6.644144,    -3.927279,  10.658474,   -6.518407,   16.854126,
        6.408115,    -12.866977,  3.115746,    -23.725134, -12.782259,  19.610769,   6.520894,
        12.271744,   21.188093,   24.417387,   46.205688,  6.543612,    7.463412,    -0.121933,
        -20.792633,  17.651730,   -68.854103,  34.387909,  -24.125385,  5.877295,    -3.360229,
        21.241285,   25.979130,   15.748973,   24.248150,  -2.224039,   58.441757,   -3.718157,
        122.487976,  12.387638,   90.708771,   -12.165685, 21.190495,   23.357334,   26.272430,
        -17.436823,  -19.787853,  3.656289,    5.362695,   16.878744,   5.168137,    29.561371,
        -4.527762,   17.279659,   -62.948391,  27.686256,  -57.471218,  18.056553,   -103.567482,
        34.415115,   -177.550385, 71.185951,   -7.963605,  4.364564,    -10.029659,  4.519005,
        -56.042358,  24.522404,   52.534611,   4.892626,   -137.490753, 46.029411,   139.878738,
        -3.032074,   -18.973515,  -20.304577,  22.222429,  -38.151535,  12.059654,   -36.519051,
        6.485674,    -25.936535,  3.907702,    -21.781179, -0.537745,   -29.240379,  -2.751613,
        -21.523174,  -0.933647,   -33.453522,  -35.102959, -33.795700,  -42.662540,  3.972908,
        -23.414536,  -16.936520,  -22.748487,  -15.643239, -5.967643,   -22.756516,  -5.227643,
        -27.941055,  -31.978968,  4.836587,    -28.860165, -11.913920,  -57.076294,  -19.732548,
        -6.270456,   -18.896357,  -36.168556,  7.704503,   -33.020996,  8.246833,    -19.445389,
        -7.987729,   -33.844589,  -0.488850,   -31.964422, -4.506656,   -4.540823,   -18.216436,
        -18.319782,  -5.247932,   -39.920876,  19.139122,  -33.639141,  25.547649,   -37.957203,
        29.284935,   -17.665739,  14.249446,   -44.940113, 22.385521,   -33.170528,  17.045589,
        -22.423969,  7.318703,    -43.073112,  7.688075,   -31.949148,  29.998055,   -34.840279,
        47.063595,   -27.932354,  44.020691,   -6.281572,  31.046120,   -105.339203, 62.656277,
        -6.859162,   34.454098,   -49.575230,  35.146664,  -87.795036,  45.299126,   -9.045088,
        31.599113,   -26.145958,  41.073055,   -12.641688, 34.780487,   10.784890,   24.209785,
        13.665582,   27.055271,   49.887096,   15.824636,  119.399117,  -4.924457,   -24.748062,
        18.355574,   -22.495522,  36.756405,   3.008056,   37.558479,   2.177490,    49.353127,
        26.458950,   34.677135,   48.521774,   27.981480,  73.889709,   18.824905,   30.459568,
        29.285480,   34.770355,   19.883286,   21.897400,  -1.793874,   46.641281,   13.688302,
        13.407138,   30.522739,   34.258739,   24.084885,  -30.482992,  50.899696,   51.904293,
        34.617455,   62.915302,   18.457005,   65.150291,  6.848956,    40.631260,   -85.219101,
        11.858008,   -39.061432,  22.096979,   -76.093552, 31.240963,   -47.900070,  39.299404,
        -94.510124,  41.596943,   -144.707367, 17.703764,  -91.740997,  -84.133026,  -13.784656,
        -47.812782,  -0.326593,   -15.400409,  9.575192,   9.370104,    -35.420040,  3.145651,
        -25.782131,  13.170676,   -47.433445,  17.051056,  -73.373642,  12.739780,   -116.972992,
        -31.375523,  -130.844193, -32.827503,  -9.868029,  -31.317705,  13.614372,   -29.313963,
        6.435763,    -16.443136,  -18.485569,  -8.856259,  -15.983675,  -20.692245,  6.506738,
        -11.140433,  -30.252962,  -11.873029,  -40.172585, -38.374580,  30.912609,   -18.240999,
        -13.506597,  -64.996765,  55.054806,   -45.182983, 34.832207,   -55.722668,  38.788254,
        -29.076435,  5.837729,    -51.767353,  17.639378,  -35.119091,  13.049065,   -26.495266,
        10.012173,   -46.209034,  48.408001,   -62.569687, 73.005287,   -71.167358,  53.260887,
        -52.126343,  33.639450,   -54.944618,  22.640060,  -60.405674,  57.742832,   -57.728695,
        53.186600,   -9.157153,   -2.652480,   -26.772312, 21.355906,   -47.951218,  61.921848,
        -71.129715,  64.608116,   -47.771648,  45.717754,  5.363293,    0.961995,    27.883047,
        -35.821987,  -48.445446,  42.507473,   -6.042100,  -13.274108,  -70.984222,  93.368202,
        -53.701488,  73.333260,   -67.535011,  83.071617,  -68.610756,  70.628838,   -85.091499,
        94.748795,   -46.826797,  27.188128,   7.792833,   6.924839,    -10.840096,  49.298084,
        25.137877,   -16.428038,  -109.526382, 90.069901,  -67.758705,  53.636845,   27.320175,
        0.586826,    94.572464,   -37.368599,  -47.755554, 53.929432,   34.299225,   2.575017,
        -19.445276,  -0.082459,   67.886292,   -54.834095, 17.729437,   -19.541290,  -73.106026,
        -4.387103,   -84.685356,  15.857450,   -29.153597, -8.539497,   22.090128,   -28.943737,
        -8.217374,   -47.168896,  -23.376040,  -19.349714, -13.787077,  -12.301406,  20.702400,
        -16.794498,  -5.824778,   12.020556,   1.943678,   5.610035,    22.736549,   1.458910,
        36.342144,   -4.130389,   28.497358,   -35.879551, -76.405510,  -6.125036,   37.298336,
        -24.530136,  40.848404,   -7.015656,   22.507788,  20.318529,   -12.650275,  28.934320,
        20.926987,   14.149328,   0.049602,    2.798921,   -13.292528,  -3.648610,   -6.331905,
        -13.025369,  -29.809196,  6.242281,    42.902950,  20.430494,   1.183125,    32.862198,
        -3.067596,   33.773254,   34.137550,   19.620726,  -22.396042,  25.571033,   -45.529518,
        -1.193010,   -57.798256,  4.175156,    -75.447990, 54.715580,   -24.953320,  31.442204,
        -52.555229,  43.806965,   1.018415,    44.267021,  -21.035095,  45.228100,   -10.445231,
        44.948811,   17.007929,   10.889329,   96.295227,  -14.256242,  53.286186,   28.294121,
        25.491442,   45.493328,   -92.533325,  48.799713,  -124.118942, 60.424404,   -44.038025,
        59.907867,   -108.507980, 76.681923,   -46.595039, 25.977861,   37.516827,   -19.949610,
        24.556387,   20.330143,   33.570801,   14.727864,  -68.333130,  38.028908,   -20.275005,
        39.748726,   30.712313,   28.574793,   -13.760597, 34.225002,   -269.739685, 41.732819,
        150.908966,  -49.889805,  175.451233,  -29.806467, 150.322708,  -39.786072,  163.861191,
        -72.265884,  182.492874,  -47.075760,  57.423843,  -10.856467,  -20.072073,  16.906929,
        -424.032501, -27.070017,  0.000000,    0.000000,   90.000000,   90.000000,   70.841515,
        99.264290,   30.325443,   57.331440,   -3.995196,  36.555290,   -9.814922,   9.966713,
        14.203475,   4.290490,    20.029814,   10.331426,  16.012476,   6.610158,    35.228718,
        13.149692,   6.117273,    26.195061,   9.308747,   11.908183,   1.429540,    7.260401,
        0.000000,    0.000000,    -2.900671,   -9.291812,  -12.143798,  -25.641008,  -24.627377,
        -4.105363,   -77.707123,  -124.173019, 16.534626,  75.282524,   5.454566,    8.213164,
        -19.180696,  5.171657,    18.212982,   23.231539,  38.382481,   -1.570065,   -334.790894,
        -10.535501,  89.117676,   -40.904530,  19.725182,  -12.041304,  -2.329852,   1.253655,
        0.000000,    0.000000,    8.297466,    7.841012,   12.144174,   18.822454,   3.295039,
        38.918972,   8.100082,    68.873581,   218.231201, -120.434944, 31.877277,   -42.289871,
        -12.235138,  -8.099348,   -3.583740,   -2.268202,  0.000000,    0.000000,    -9.597303,
        11.209940,   -11.088276,  23.154116,   -4.936619,  23.651133,   -7.207315,   33.648293,
        1.863166,    2.323722,    0.000000,    0.000000,   -0.410153,   1.070332,    2.207053,
        4.259205,    3.266445,    1.825872,    1.330441,   2.353806,    0.000000,    0.000000,
        0.000000,    0.000000,    3.127656,    -5.027553,  2.581224,    -4.161567,   8.254206,
        -7.212350,   23.429407,   3.012889,    0.000000,   0.000000,    20.000000,   10.000000};

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorBonus:\n\t{}", arrayToString(params.bishopPawnSameColorBonus));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    oss << "\nkingTropismBonus: {\n";
    writeTaperedTermPerPiece(params.kingTropismBonus, oss);
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    return oss.str();
}
