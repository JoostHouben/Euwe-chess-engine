#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        81.195930,   385.778992,  391.275665,  523.478760,  1512.579102, 0.000000,    86.917786,
        285.819733,  279.700531,  488.823853,  701.501709,  0.000000,    0.000000,    1.000000,
        1.000000,    2.000000,    4.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -30.647678,  -20.612858,
        -27.381172,  -4.773410,   -5.471348,   16.324446,   30.817389,   -8.734250,   -27.010708,
        -12.908739,  -14.146464,  -1.572633,   -3.345374,   12.594866,   35.239914,   9.779472,
        -27.019466,  -7.288158,   -4.136257,   21.862078,   13.712325,   15.301812,   -1.889159,
        -16.571140,  -18.605553,  -4.498883,   -12.075188,  13.481821,   29.609076,   1.843520,
        16.997721,   -17.221418,  -11.265070,  10.989599,   -10.790767,  6.112197,    50.475254,
        88.260078,   142.167755,  83.602066,   188.362610,  209.276093,  3.927517,    124.466118,
        89.798210,   83.019318,   -30.988800,  -75.072639,  0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -207.121552, -21.406841,
        -37.032864,  -25.268660,  -19.943987,  19.289618,   -27.755220,  -207.890732, -30.951738,
        -76.440506,  -42.569626,  -8.626091,   -14.028706,  7.209296,    -22.017380,  -60.735420,
        -36.912464,  -15.719187,  -6.534834,   6.234269,    26.272348,   5.919440,    21.329477,
        -57.792488,  -13.957222,  -3.291566,   0.048017,    6.510077,    28.231569,   14.931070,
        42.281914,   6.910451,    -20.069401,  -5.508782,   31.463947,   68.395927,   16.538582,
        50.575424,   -9.814243,   23.529360,   29.135351,   13.734880,   79.721947,   86.497505,
        135.451370,  101.986847,  -5.685442,   -5.830667,   -139.869370, -70.161377,  12.028363,
        66.525635,   25.309925,   -0.898526,   10.589490,   4.103465,    -149.030823, -128.803162,
        -24.752180,  -772.422058, -70.271957,  -293.350891, 134.716965,  -264.279633, -50.713749,
        18.267172,   -1.504302,   -29.936390,  -2.865107,   -26.855999,  1.705997,    -30.710186,
        13.322176,   2.473347,    5.594265,    1.555892,    -10.841684,  18.376621,   10.890518,
        -32.747383,  -6.678324,   24.013124,   12.090115,   1.728351,    1.204720,    1.334227,
        16.508865,   -10.002310,  20.520761,   1.152431,    -0.729970,   54.020557,   21.116171,
        -2.095686,   -7.038837,   12.000957,   -6.450083,   -6.989476,   16.120699,   23.596161,
        58.656937,   -19.454647,  -16.139975,  -60.291424,  -22.843695,  -5.090456,   38.023602,
        42.238777,   32.701099,   132.071533,  110.510597,  51.848118,   17.844646,   -33.444199,
        2.999409,    -0.225487,   8.812103,    -48.228542,  -12.657860,  -64.649483,  -172.078278,
        -50.058586,  -50.674122,  -77.475327,  -13.030165,  -177.424072, 115.129982,  33.451084,
        1.268996,    2.286638,    -3.932515,   5.785911,    -0.511207,   -2.588327,   -7.047927,
        -3.781766,   -55.186371,  -32.124340,  -27.780565,  -15.867261,  0.182497,    -14.421187,
        -34.289345,  -49.127777,  -20.634052,  -38.089916,  -22.746275,  -18.688236,  -12.184052,
        -15.872916,  12.563357,   -29.441618,  -40.562313,  -46.181927,  -22.695704,  -0.151379,
        -18.141010,  8.438057,    1.183969,    16.934254,   -31.612200,  -33.929085,  5.633743,
        1.181008,    -23.192926,  33.180061,   0.023591,    -27.577730,  -6.692060,   -10.276902,
        23.545570,   44.047043,   52.494549,   78.695015,   111.144920,  -15.164411,  -4.095074,
        42.075039,   45.651855,   57.756073,   105.983902,  126.046524,  95.962372,   67.349960,
        72.121544,   33.242180,   89.211319,   61.049561,   103.686707,  84.161003,   157.274963,
        23.986797,   38.957466,   -16.370184,  -5.258155,   11.383567,   19.606730,   -15.200656,
        -44.050022,  -141.680328, -73.064255,  -40.624359,  8.399468,    -0.178996,   -3.138463,
        10.685594,   -7.354638,   21.361038,   -48.300053,  -15.157645,  -22.284269,  -6.163518,
        -3.836204,   2.679162,    0.832625,    -22.124094,  -15.376750,  -29.071795,  -26.634928,
        -19.275568,  -2.561730,   3.881080,    -11.927756,  -8.773934,   -16.586107,  -31.341097,
        -20.535460,  -36.170719,  -21.621870,  -8.440375,   -25.441072,  11.413606,   -22.621229,
        -26.432631,  -32.478001,  -22.618505,  29.086792,   80.022491,   134.397980,  9.116186,
        24.292822,   -48.824482,  -28.810728,  12.102948,   -10.842267,  21.315613,   35.454563,
        74.439117,   22.577061,   9.606748,    -65.197983,  -10.385844,  80.457916,   113.303062,
        -68.621193,  83.392899,   -37.978043,  46.096657,   -7.279371,   -147.728455, -17.892633,
        -58.995361,  17.231817,   4.896108,    -49.093555,  -69.565178,  -52.513077,  -59.722187,
        -53.103916,  -4.484085,   7.711655,    13.777180,   -140.062164, -25.765951,  -24.150478,
        -27.394361,  -11.816386,  -0.727436,   -40.717255,  -27.223246,  -79.490906,  -54.359341,
        4.182127,    -32.610283,  -29.389069,  11.528942,   -78.902534,  -97.319191,  -17.447109,
        -131.303986, -9.788984,   -234.042938, -32.060947,  -91.125366,  -29.894918,  -97.616203,
        -2.253667,   -32.237240,  -49.206570,  -194.320984, -241.874023, -147.272888, -228.331451,
        -211.298584, -41.465069,  -15.743700,  -3.730609,   -2.723007,   -151.919144, -136.226074,
        -107.497086, -255.863785, 104.851303,  110.625351,  88.613045,   -0.853269,   240.444046,
        -30.589617,  -61.057980,  43.949810,   0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    11.860022,   4.151548,    6.759548,
        -122.305748, -70.670036,  0.402044,    -12.262837,  -9.733772,   15.778776,   -4.415536,
        0.119870,    -4.537449,   -6.683465,   2.616424,    -16.114464,  -2.937198,   14.381125,
        5.699937,    -6.755337,   -25.009573,  -16.258745,  -3.043653,   -2.777933,   -0.845261,
        45.828964,   21.556026,   12.420434,   -7.200584,   -15.091451,  1.881948,    8.629297,
        13.898417,   53.274624,   11.107436,   36.650383,   -0.163347,   -20.349005,  -29.440569,
        -5.762372,   -26.508156,  75.041443,   57.316772,   86.576385,   60.695438,   68.568436,
        63.879398,   138.535110,  121.613647,  0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    -32.902157,  -107.235863, -27.124638,
        -33.628838,  -44.895458,  -45.415501,  -43.262371,  -12.921776,  -33.801365,  10.189317,
        -19.757101,  -2.712020,   -10.133711,  -16.999569,  -47.305458,  9.489667,    -40.748726,
        -14.120087,  12.068679,   3.546577,    10.874865,   -19.154877,  -32.357605,  24.415051,
        -29.363163,  11.619190,   29.471977,   29.481602,   4.381320,    16.502153,   -16.575377,
        -12.280027,  -14.469700,  23.315119,   19.547031,   28.944773,   31.254244,   26.843582,
        21.246330,   -10.532333,  -14.685545,  12.490668,   8.280169,    18.804411,   -13.708120,
        -4.874879,   11.217672,   -2.656327,   28.086527,   8.909686,    0.785400,    17.892073,
        -12.940586,  1.975091,    -34.493042,  8.167228,    -41.178436,  -53.073521,  -24.983032,
        103.978592,  6.670444,    44.560928,   -20.242989,  -83.836838,  16.345163,   -30.123487,
        -29.870867,  6.147811,    -12.781865,  -17.011864,  -17.403255,  -3.146003,   -31.696611,
        -19.293703,  -7.801705,   0.675238,    3.812527,    -4.923373,   -22.336529,  -57.055553,
        -2.666607,   5.570222,    2.597896,    13.295064,   14.164039,   -3.047323,   -13.462747,
        -31.793726,  -0.927984,   -4.033033,   30.727201,   -1.744581,   -0.686795,   2.136537,
        2.358133,    -2.677815,   -16.746454,  25.683062,   -2.868084,   11.569860,   -2.875957,
        10.224416,   14.356249,   10.624899,   20.641521,   24.503328,   14.814789,   -19.427135,
        -4.196554,   4.827251,    -21.332273,  -0.303663,   -19.939690,  -4.004111,   6.950825,
        27.903200,   -12.805772,  26.868149,   12.646973,   2.923503,    47.695210,   12.371546,
        -3.285385,   11.514122,   17.802679,   19.704720,   11.623311,   -8.839950,   0.233158,
        -21.108084,  -0.324483,   -6.793873,   -14.473078,  -8.813118,   -20.383009,  -39.564320,
        6.731536,    -4.345600,   -2.595544,   -4.886695,   -28.404305,  0.931857,    -10.222252,
        -21.122393,  -0.170591,   9.476151,    1.539718,    -4.359858,   -7.179888,   -6.545304,
        -27.587517,  -5.993450,   28.338881,   28.533350,   17.825079,   -0.594238,   8.049367,
        -3.132717,   -15.141119,  -5.912242,   33.204926,   44.318317,   24.306187,   21.022446,
        22.517410,   6.496780,    5.299408,    8.133383,    32.186443,   29.113197,   16.492989,
        -5.627835,   4.851722,    -8.365562,   -8.878284,   16.210096,   35.273815,   16.624771,
        16.747299,   4.762408,    -1.765514,   -4.586350,   -0.075733,   8.983147,    -6.872246,
        17.816469,   1.448880,    10.267982,   1.730069,    19.499287,   -7.008212,   20.088551,
        -114.704941, -12.588212,  -68.869461,  -32.820782,  -85.250008,  -72.424934,  -39.966259,
        51.066093,   26.976990,   14.046013,   -32.556187,  -1.138028,   -0.204081,   -40.420853,
        -87.141472,  -191.698395, 30.719036,   -30.860123,  17.745598,   -18.510056,  3.519765,
        -15.205670,  20.183779,   2.806495,    -31.357224,  29.717472,   11.718649,   20.400770,
        2.665099,    9.158914,    28.957386,   20.345043,   -22.171471,  30.209690,   19.642857,
        57.302120,   31.140308,   33.649166,   68.643578,   13.467510,   -6.439010,   44.623894,
        74.383347,   52.946583,   10.607703,   1.745029,    -83.070641,  46.984554,   -55.264542,
        78.055817,   57.612087,   19.307261,   62.198002,   43.502136,   -18.512653,  -45.254013,
        14.579373,   -6.706653,   74.459595,   57.226997,   13.639752,   13.949944,   93.916008,
        -23.451187,  -4.314466,   -56.358135,  -18.829327,  21.382704,   -28.072870,  -13.681156,
        -38.682365,  -69.664001,  -6.143604,   0.472013,    -2.367946,   21.797974,   18.170578,
        4.507815,    3.710452,    -32.604191,  -1.337435,   -13.546330,  10.632079,   23.490473,
        30.101099,   16.674263,   10.656058,   -7.989692,   7.732621,    16.878204,   24.988430,
        41.725975,   37.145168,   30.111523,   41.500790,   6.761304,    23.560535,   72.404846,
        42.631226,   67.108406,   44.403755,   69.093216,   58.737713,   49.226768,   21.245737,
        60.694633,   68.976006,   69.501282,   79.477043,   80.213356,   111.810181,  71.434189,
        3.019921,    46.712997,   47.627613,   43.239735,   74.770714,   57.290855,   53.563633,
        65.808174,   -58.209808,  -7.418706,   -16.788843,  -29.094011,  -98.028282,  24.199469,
        21.741468,   -87.776611,  0.000000,    90.000000,   92.201378,   49.988743,   28.762499,
        5.005360,    8.759241,    19.195974,   9.709810,    36.932476,   21.151375,   15.259863,
        5.792686,    0.000000,    -8.492737,   -19.707323,  -21.725641,  -40.392796,  48.009956,
        2.353697,    11.744457,   16.487478,   17.952433,   -48.321396,  -30.555319,  -14.021761,
        -1.752424,   0.000000,    7.544317,    18.121740,   28.296288,   30.308512,   -55.630077,
        -20.250803,  -6.676313,   -2.692423,   0.000000,    0.953107,    5.551809,    8.839337,
        16.063679,   3.899821,    0.000000,    0.000000,    2.392930,    4.720487,    1.236441,
        0.000000,    0.000000,    0.000000,    3.992138,    1.004436,    5.053922,    0.000000};

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{:>6.1f}, ", value);
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <typename T, std::size_t N>
std::string arrayToString(const std::array<T, N>& valueArray) {
    std::string inner =
            valueArray
            | std::ranges::views::transform([](const T& v) { return std::format("{:>6.1f}", v); })
            | std::ranges::views::join_with(std ::string(", ")) | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "pieceValuesEarly: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.pieceValuesEarly[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValuesLate: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.pieceValuesLate[pieceIdx]);
    }
    oss << "}\n";

    oss << "\nphaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceSquareTablesWhiteEarly: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhiteEarly, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhiteLate: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhiteLate, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format("\ndoubledPawnPenalty:\n\t{:>6.1f}", params.doubledPawnPenalty);

    oss << std::format("\nisolatedPawnPenalty:\n\t{:>6.1f}", params.isolatedPawnPenalty);

    oss << std::format(
            "\nbishopPawnSameColorBonus:\n\t{}", arrayToString(params.bishopPawnSameColorBonus));

    oss << std::format("\nbishopPairBonus:\n\t{:>6.1f}", params.bishopPairBonus);

    oss << std::format("\nknightPairBonus:\n\t{:>6.1f}", params.knightPairBonus);

    oss << std::format("\nrookPairBonus:\n\t{:>6.1f}", params.rookPairBonus);

    oss << std::format("\nrookSemiOpenFileBonus:\n\t{:>6.1f}", params.rookSemiOpenFileBonus);

    oss << std::format("\nrookOpenFileBonus:\n\t{:>6.1f}", params.rookOpenFileBonus);

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{:>6.1f}", params.kingVirtualMobilityPenalty);

    oss << std::format("\nmobilityBonusEarly:\n\t{}", arrayToString(params.mobilityBonusEarly));

    oss << std::format("\nmobilityBonusLate:\n\t{}", arrayToString(params.mobilityBonusLate));

    return oss.str();
}
