#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        0.204272,    1.000000,    1.892669,    3.755643,   8.460752,    0.000000,    109.436043,
        84.345467,   411.143616,  269.418304,  416.051208, 262.086304,  554.512634,  513.258728,
        1673.612305, 602.174744,  0.000000,    0.000000,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,   0.000000,    0.000000,    -35.127441,
        19.888577,   -26.211962,  4.335008,    -25.102625, 7.116979,    -14.861771,  -54.421867,
        -12.667470,  -4.917657,   21.061308,   -4.224713,  35.122173,   -16.040615,  -12.228981,
        -10.387266,  -26.907709,  15.008926,   -16.154282, -3.845737,   -5.856708,   -5.783989,
        -5.271871,   5.606697,    -8.419944,   -6.342312,  18.220963,   -6.650786,   42.626751,
        -20.766920,  3.315105,    -1.992548,   -16.792429, 10.753325,   -10.427203,  13.628010,
        2.087919,    3.249241,    24.736164,   -28.316870, 4.622808,    -9.391709,   21.441290,
        -8.822141,   -4.699115,   1.966470,    -15.057099, -1.644601,   -18.470612,  44.842495,
        0.103856,    29.419832,   -14.980225,  11.099251,  6.726515,    5.031801,    26.269505,
        -10.443251,  4.986002,    -5.566804,   -14.510038, 10.164347,   -15.095108,  7.302303,
        -1.498501,   54.557430,   15.225600,   25.332392,  -6.815540,   28.201605,   7.463258,
        -7.194464,   63.307011,   -32.183399,  63.280933,  -18.177153,  120.124207,  1.406723,
        109.844788,  -29.002899,  203.553421,  66.282188,  148.406281,  75.966751,   63.476383,
        85.885315,   127.118683,  55.994831,   92.522820,  78.663589,   11.491292,   83.403763,
        -12.457837,  133.630417,  6.480276,    104.302315, 0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,   0.000000,    0.000000,    -145.208069,
        -49.444031,  -37.124432,  -72.005455,  -32.293682, -14.109634,  -32.785748,  -21.216719,
        -34.669670,  -46.054707,  -14.870030,  -38.793343, -31.298271,  -65.531822,  -120.543419,
        -69.728012,  -33.545414,  -58.043671,  -51.198730, 1.327898,    -29.373940,  -19.598909,
        -0.186317,   -1.223472,   -9.039255,   -6.071470,  -5.253502,   -12.581746,  -40.967113,
        -48.563057,  -58.467197,  -28.332861,  -50.841972, -40.819641,  -17.964108,  -0.112795,
        -8.504030,   10.881758,   2.926888,    5.181805,   47.981796,   1.013163,    5.520916,
        -23.568344,  13.365204,   -19.924131,  -37.752251, 6.556332,    -16.091661,  -14.059410,
        -8.183983,   5.713398,    22.501194,   16.936342,  -0.590971,   31.728703,   20.508175,
        28.139496,   10.959698,   14.053082,   20.768661,  -5.244714,   2.863348,    -9.813139,
        -25.651840,  -23.878601,  13.870811,   17.615738,  50.136925,   19.030327,   65.442917,
        25.354538,   20.817348,   26.669209,   65.783730,  8.557381,    3.799904,    29.489727,
        18.907047,   -22.515692,  40.329155,   -32.925083, 5.247513,    6.992827,    46.723251,
        20.782555,   89.539803,   15.406584,   80.722145,  -1.550223,   162.113220,  -13.070277,
        21.839298,   6.348858,    16.845634,   -6.047723,  -106.011383, 27.639446,   -19.360651,
        -7.842465,   -13.583586,  24.822468,   58.678696,  0.163767,    19.287247,   -6.795934,
        30.686722,   5.856144,    -20.849430,  -17.689705, 52.767670,   -29.502481,  -150.222916,
        -46.108135,  -105.916801, -37.362812,  19.358368,  -40.693756,  -323.477325, 17.119015,
        -87.541191,  24.553024,   -232.716125, -0.063998,  404.237274,  -66.213936,  -249.858917,
        -41.765244,  -25.969995,  -7.629888,   4.853449,   -20.108883,  -3.111873,   -26.370640,
        -36.867146,  8.450135,    13.486084,   -27.980528, -30.363583,  -37.740078,  -61.910164,
        -7.607649,   1.806010,    -14.572976,  19.540146,  -39.937084,  7.264794,    -16.992479,
        16.624676,   -18.374023,  3.813519,    3.012106,   -1.952810,   -14.289402,  12.329247,
        -8.968698,   19.035038,   -24.510983,  -34.024731, -56.665920,  8.218204,    -6.799912,
        11.844471,   4.449135,    14.048454,   -5.621900,  1.377877,    2.189048,    9.599972,
        3.513261,    7.433751,    -5.737020,   12.560894,  -4.882848,   19.555832,   -35.320999,
        8.760506,    6.551239,    15.532257,   -0.979280,  -9.179560,   30.543247,   36.826267,
        5.534747,    17.952137,   -4.072650,   -0.160661,  4.031260,    -12.235742,  20.894865,
        1.313181,    -6.488268,   4.878304,    -17.976431, -15.038946,  21.943668,   4.751404,
        12.559735,   21.906174,   18.164839,   49.345345,  0.591232,    6.596489,    -2.403926,
        -29.481222,  23.622673,   -64.749199,  36.490986,  -19.428514,  11.846177,   -2.991684,
        22.894587,   23.925236,   16.188982,   27.442467,  -4.747451,   59.086304,   -4.536737,
        132.597565,  8.885063,    95.753784,   -12.167618, 31.273838,   24.284098,   35.258801,
        -12.386413,  -23.845112,  6.799279,    9.524834,   18.109533,   10.778385,   29.359713,
        -5.178327,   16.564247,   -100.218864, 42.766022,  -68.708916,  16.360714,   -95.647614,
        40.224747,   -159.548477, 78.179680,   26.002609,  -2.294325,   1.245545,    0.857947,
        -38.768311,  18.146088,   60.447281,   4.610198,   -125.453217, 44.365974,   165.217758,
        -3.738408,   18.183125,   -23.548998,  22.038696,  -30.848391,  7.846489,    -28.765024,
        0.504040,    -17.925085,  -0.228375,   -14.916219, -4.958889,   -22.353697,  -7.564327,
        -13.441544,  -14.456928,  -24.842215,  -13.404617, -47.732704,  -48.451351,  12.547305,
        -27.195642,  -11.416148,  -28.823460,  -9.498116,  -11.649529,  -17.196224,  -9.909992,
        -22.757175,  -36.605972,  8.172771,    -36.012833, -8.098619,   -62.361649,  -17.547480,
        -7.371902,   -15.296565,  -42.115509,  10.178725,  -39.616402,  11.476071,   -21.603785,
        -6.244586,   -32.858334,  -4.249982,   -35.949070, -6.861636,   -5.937630,   -20.867407,
        -26.195255,  -3.066013,   -43.057240,  19.193590,  -35.661076,  21.495348,   -43.285458,
        25.800833,   -21.560276,  11.499494,   -49.171860, 19.955709,   -35.063969,  12.160739,
        -25.125971,  0.411316,    -48.386536,  5.910760,   -32.860580,  24.324995,   -39.469769,
        39.719872,   -32.730488,  35.523735,   -7.156826,  20.129263,   -113.944016, 54.589314,
        -6.804409,   25.955614,   -49.902466,  25.883112,  -92.616432,  39.691502,   -10.235163,
        24.274321,   -29.666439,  30.992464,   -20.216595, 24.681047,   6.256195,    11.016107,
        10.958427,   15.368640,   50.867729,   3.440073,   139.969528,  -20.395105,  -28.142210,
        12.661210,   -23.232756,  30.365225,   4.912624,   29.328562,   -2.053318,   41.676315,
        28.135658,   24.045488,   53.714638,   17.340277,  82.041664,   12.752095,   47.573158,
        20.451193,   32.250656,   15.924064,   16.445938,  -0.501004,   45.368835,   14.539538,
        15.501411,   31.241747,   39.846931,   23.769896,  -45.746998,  59.186970,   57.772308,
        33.639568,   71.361198,   16.411890,   71.435295,  3.193090,    43.614239,   -79.648895,
        14.873526,   -33.341434,  19.736021,   -67.520340, 36.198147,   -41.741524,  47.549587,
        -88.784470,  48.237972,   -139.907227, 14.302092,  -74.416298,  -86.836220,  2.568784,
        -49.640671,  9.282144,    -22.343920,  21.426689,  8.190550,    -33.135220,  5.113897,
        -28.532684,  17.484892,   -52.674870,  20.448393,  -75.487534,  19.154905,   -122.366188,
        -27.921450,  -127.842751, -34.930401,  -3.731879,  -33.734264,  7.160728,    -38.067249,
        5.644436,    -18.445810,  -25.676802,  -7.298701,  -26.906324,  -26.101931,  9.806756,
        -9.114634,   -26.761019,  -16.085245,  -25.391441, -40.618084,  31.996502,   -23.391428,
        -19.157366,  -74.216988,  49.105606,   -58.414623, 28.733864,   -63.036583,  27.595877,
        -34.535961,  -0.772868,   -56.652878,  20.596067,  -39.964085,  31.729971,   -27.185213,
        10.282113,   -60.605633,  48.732182,   -83.221741, 77.842957,   -87.667641,  43.067867,
        -64.630806,  26.239428,   -68.947380,  21.450594,  -72.121574,  62.897190,   -53.803448,
        51.304569,   -11.634211,  -3.518090,   -33.991436, 7.570579,    -77.888191,  67.934006,
        -93.737366,  62.550430,   -61.024132,  38.724720,  5.356672,    -18.966082,  32.130550,
        -42.236729,  -55.391636,  58.698208,   0.729276,   -18.517426,  -91.515808,  107.286957,
        -72.454498,  79.871910,   -87.844017,  86.497726,  -91.489899,  72.659447,   -104.733429,
        97.506660,   -36.559368,  15.715733,   13.749189,  13.343257,   4.275159,    53.025433,
        34.191677,   -12.804803,  -146.927612, 128.068588, -82.378540,  71.778145,   18.665998,
        12.021193,   91.695938,   -30.050873,  -30.538103, 51.441025,   69.791321,   -10.291316,
        -43.475803,  5.028499,    45.256123,   -48.527191, -12.984571,  -8.275855,   -96.520088,
        0.787685,    -9.916814,   -15.844426,  -47.200340, -5.253499,   6.162345,    -25.970648,
        -23.802225,  -45.603951,  -42.074753,  -13.576365, -32.712559,  -12.268490,  3.909015,
        -16.156582,  -20.342997,  12.325730,   -11.950054, 6.368851,    7.604646,    3.475441,
        21.688784,   -0.875668,   15.774066,   -32.599575, -103.693443, -4.331524,   27.603987,
        -27.924038,  30.055241,   -8.554379,   7.928994,   20.337284,   -25.125864,  28.574125,
        9.661249,    14.121288,   -15.758192,  2.850218,   -32.162270,  -0.391477,   -35.032162,
        -11.009039,  -40.378262,  3.239182,    30.921284,  18.272661,   -16.344713,  32.355419,
        -13.647632,  31.423607,   23.695559,   16.658623,  -36.779209,  22.292757,   -48.863949,
        -4.274436,   -72.660622,  1.739531,    -91.686348, 48.962929,   -35.512573,  27.872522,
        -74.851349,  42.404709,   -21.905643,  42.772663,  -32.049225,  40.417263,   -19.564491,
        38.595955,   12.257243,   5.962812,    108.779076, -18.604906,  58.893711,   19.244320,
        19.343508,   40.378178,   -103.568268, 47.367481,  -138.573410, 58.010170,   -53.801079,
        54.984951,   -116.177872, 70.272408,   -72.484406, 26.637636,   34.325714,   -20.391098,
        34.859276,   16.893982,   29.761652,   11.455290,  -73.756004,  37.070499,   -7.088544,
        38.177479,   6.093416,    28.960369,   -11.674151, 27.068378,   -289.631073, 43.720272,
        191.391144,  -63.549545,  187.138824,  -33.052971, 137.856552,  -41.636673,  156.393860,
        -71.311188,  123.000557,  -37.796448,  71.938461,  -11.407913,  -52.266724,  25.934313,
        -490.659821, -22.187656,  0.000000,    0.000000,   90.000000,   90.000000,   77.069679,
        109.058380,  31.531317,   63.484123,   -6.822799,  41.509834,   -11.539557,  12.389920,
        12.415141,   6.882628,    21.527718,   12.010369,  15.431361,   6.453008,    38.008957,
        -1.526189,   4.250628,    21.364365,   9.397390,   7.993123,    1.594689,    6.664689,
        0.000000,    0.000000,    -1.711969,   -8.438244,  -13.786602,  -22.970221,  -31.053122,
        4.873096,    -91.015427,  -94.721115,  18.462860,  78.799202,   4.919626,    9.186514,
        -19.051268,  4.092631,    24.144913,   11.541730,  37.826080,   -1.045095,   -327.655701,
        -10.837069,  94.066345,   -39.953587,  27.672817,  -11.906270,  -3.661233,   2.557237,
        0.000000,    0.000000,    6.964893,    8.559877,   11.251898,   19.564907,   0.166043,
        41.769806,   8.467003,    67.200356,   232.958832, -131.393356, 41.364391,   -48.702194,
        -10.587659,  -10.053738,  -2.374890,   -3.463066,  0.000000,    0.000000,    -11.582384,
        13.780399,   -15.716735,  27.875502,   -10.397270, 28.651014,   -10.347192,  37.154415,
        1.951340,    1.876765,    0.000000,    0.000000,   1.269892,    -0.113069,   3.279791,
        5.536576,    3.464882,    3.371550,    2.088087,   4.358586,    0.000000,    0.000000,
        0.000000,    0.000000,    3.279464,    -3.078914,  2.815863,    -3.558616,   8.882122,
        -7.082882,   28.202623,   1.594638,    0.000000,   0.000000,    20.000000,   10.000000,
        5.234396,    -2.085770,   -3.677508,   -50.668991, 14.598727,   -21.099482,  4.795854,
        11.010691,   -60.293789,  -22.659725,  -7.157954,  -13.746376,  5.755250,    8.963619,
        -32.861950,  -37.947704,  -12.260262,  -14.084535, 4.364502,    9.564095,    -43.294022,
        -16.076303,  -9.625093,   -5.042583,   3.964978,   2.729548,    -58.077637,  -29.880877,
        -49.499336,  -15.617427,
};

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorBonus:\n\t{}", arrayToString(params.bishopPawnSameColorBonus));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    oss << "\nkingTropismBonus: {\n";
    writeTaperedTermPerPiece(params.kingTropismBonus, oss);
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    return oss.str();
}
