#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        83.645554,   399.665344,  395.889587,  533.521484,  1532.841675, 0.000000,    89.983994,
        300.440369,  287.210693,  497.365814,  721.605164,  0.000000,    0.000000,    1.000000,
        1.000000,    2.000000,    4.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -30.574112,  -20.579130,
        -27.617090,  -3.704251,   -5.688927,   16.407141,   30.794994,   -8.873569,   -26.935801,
        -13.308743,  -13.865192,  -1.625713,   -3.516461,   12.762196,   35.098080,   9.490713,
        -27.246870,  -7.114266,   -4.094449,   22.303032,   12.914047,   15.668212,   -3.421286,
        -16.923010,  -17.794895,  -4.021359,   -11.819893,  13.259054,   30.224159,   4.948935,
        17.029133,   -17.651613,  -10.568683,  12.783564,   -8.077641,   5.154857,    52.027542,
        88.779640,   143.982727,  84.447304,   195.214386,  217.079391,  1.942998,    129.128311,
        95.116295,   91.618317,   -21.205862,  -71.178703,  0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -210.334061, -22.513308,
        -38.867981,  -22.891081,  -19.488651,  19.098684,   -28.431669,  -214.939880, -32.379440,
        -73.503899,  -43.179802,  -8.859770,   -14.218302,  3.244534,    -25.542025,  -61.310371,
        -37.640667,  -16.231194,  -6.330980,   7.035205,    26.962614,   5.850759,    21.860214,
        -61.144081,  -14.148846,  -3.561898,   1.087867,    7.093687,    27.780298,   17.860020,
        41.623920,   6.051719,    -17.857323,  -4.767601,   32.930756,   71.481621,   19.421303,
        52.771362,   -13.351212,  22.978661,   24.576981,   15.144400,   84.952301,   86.938721,
        141.202866,  103.149483,  -3.994459,   -6.687541,   -141.888260, -69.908920,  10.838664,
        67.920784,   25.517506,   -6.683801,   15.224912,   18.123142,   -150.563293, -127.298920,
        -31.981508,  -798.765686, -66.446365,  -296.650391, 118.506371,  -277.158508, -49.532379,
        18.111891,   -1.036007,   -31.308363,  -1.880435,   -28.344852,  0.225334,    -30.736071,
        13.624249,   3.490183,    5.068092,    1.391440,    -10.078650,  17.513515,   11.729320,
        -33.566917,  -5.334295,   23.580120,   12.264464,   0.112555,    1.753086,    1.670596,
        16.474524,   -11.317303,  21.362391,   0.757342,    -1.507805,   55.006226,   21.174532,
        -1.388669,   -5.529606,   10.997848,   -5.021338,   -9.505514,   17.777002,   23.891352,
        59.508640,   -19.643103,  -16.753004,  -35.480003,  -23.029163,  -4.801106,   40.326008,
        43.945812,   34.926655,   138.352676,  111.807976,  51.897770,   14.299451,   -40.579136,
        5.587116,    3.724104,    8.279665,    -47.840038,  -22.753839,  -63.735012,  -177.600998,
        -57.949009,  -56.282040,  -81.719551,  -22.989309,  -139.505966, 130.859695,  37.390015,
        1.319038,    2.223190,    -3.646394,   5.965505,    0.002650,    -2.456412,   -6.353059,
        -4.056016,   -55.359543,  -32.537212,  -27.540716,  -16.287966,  -0.152607,   -14.685235,
        -34.151051,  -53.019150,  -19.934092,  -40.094734,  -22.212568,  -19.662920,  -12.838614,
        -14.198269,  9.772705,    -30.357481,  -43.409550,  -48.076988,  -23.910156,  0.221821,
        -19.777309,  5.745133,    -0.231088,   14.803897,   -30.575541,  -35.396019,  4.904042,
        0.363945,    -26.381271,  31.304201,   2.180965,    -29.490250,  -9.529830,   -13.271707,
        22.130827,   44.652710,   55.061493,   82.024696,   112.286606,  -19.481323,  -3.870053,
        43.826038,   46.485256,   57.227608,   109.891945,  121.677078,  100.602127,  70.566551,
        75.529556,   35.278351,   90.070015,   58.430626,   102.780632,  89.868202,   163.585541,
        24.263443,   33.714386,   -16.477642,  -6.445065,   11.648781,   19.022497,   -14.259348,
        -45.812672,  -151.456543, -76.328835,  -40.788307,  8.201201,    0.981896,    -2.890755,
        8.426273,    -8.103673,   16.083244,   -50.436413,  -15.243261,  -22.512568,  -7.411715,
        -4.008245,   3.397534,    -0.619899,   -24.102097,  -14.651340,  -28.057821,  -25.089756,
        -19.710812,  -4.191306,   4.810624,    -12.183787,  -9.152701,   -20.327082,  -30.008879,
        -25.273376,  -34.300812,  -19.724234,  -13.641137,  -27.411072,  12.391294,   -23.934750,
        -24.842232,  -36.122368,  -23.266277,  35.719654,   78.039398,   134.469330,  8.337381,
        24.904394,   -48.624157,  -28.227194,  11.094027,   -12.575023,  30.204657,   35.381992,
        63.763836,   21.099928,   24.037506,   -66.235535,  -1.762035,   88.304474,   102.180893,
        -65.409790,  84.821304,   -40.466835,  46.174370,   -8.456614,   -148.964493, -17.667675,
        -59.559692,  17.297915,   4.857325,    -44.699917,  -75.524170,  -53.186062,  -61.101250,
        -53.899014,  -4.236304,   8.287886,    14.342410,   -144.711914, -30.958040,  -24.172445,
        -20.738312,  -13.857497,  -0.521984,   -42.976490,  -25.938637,  -72.342369,  -60.811821,
        1.458181,    -38.208950,  -35.088985,  17.880161,   -85.831886,  -95.994057,  -5.816108,
        -140.765396, -5.031019,   -242.951675, -43.448040,  -85.722000,  -29.592060,  -104.232750,
        11.296134,   -10.402040,  -52.676559,  -192.381561, -245.804565, -148.247269, -244.414948,
        -199.007126, -27.075857,  10.768704,   -37.538067,  -19.106630,  -139.035751, -134.094833,
        -108.803810, -255.803436, 121.749657,  105.480606,  129.892578,  -1.383350,   214.841782,
        -38.075714,  -69.763199,  68.247948,   0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    11.807534,   4.237301,    6.807245,
        -127.956108, -74.101379,  0.489001,    -12.543458,  -9.593366,   15.769651,   -4.167021,
        0.079604,    -4.732402,   -6.807912,   2.734004,    -16.381479,  -2.787956,   14.528002,
        5.810158,    -6.857145,   -25.049929,  -15.896719,  -3.329409,   -2.291167,   -0.897024,
        46.092255,   21.860666,   12.519427,   -7.222354,   -15.351489,  0.898227,    8.761896,
        14.108974,   53.001953,   10.935496,   36.597267,   -0.065832,   -22.919771,  -29.826662,
        -7.175257,   -27.292280,  77.307594,   58.908909,   89.429771,   61.606670,   70.966354,
        64.859467,   141.513947,  124.213333,  0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    -32.528278,  -112.361794, -25.779875,
        -37.002563,  -46.522285,  -47.712734,  -44.966446,  -15.854870,  -31.935572,  11.597425,
        -20.111717,  -1.990224,   -10.179049,  -15.626799,  -45.846790,  11.831034,   -40.757008,
        -14.964349,  12.563107,   4.061973,    10.587811,   -18.615618,  -32.758877,  26.275898,
        -30.060825,  11.290785,   29.427633,   29.714907,   5.108269,    14.867176,   -15.796228,
        -11.139737,  -14.783463,  23.911598,   19.382935,   27.702213,   28.961239,   26.837835,
        21.448338,   -10.793868,  -12.592745,  12.742708,   7.043835,    20.311783,   -15.561028,
        -4.927543,   11.065820,   -3.096453,   25.704487,   10.155480,   1.596809,    18.989416,
        -12.841597,  5.479311,    -31.837557,  4.228119,    -47.396271,  -55.723301,  -22.483147,
        111.126266,  5.923011,    43.209751,   -16.084362,  -80.321854,  16.617100,   -30.110931,
        -30.633144,  6.552639,    -12.110341,  -16.224087,  -17.411762,  -4.127029,   -32.573608,
        -20.361668,  -8.263489,   0.951311,    2.786793,    -3.642448,   -23.198622,  -59.551521,
        -3.610061,   6.244906,    2.607346,    14.646290,   14.080533,   -2.805458,   -13.730269,
        -32.453083,  -1.927326,   -3.540242,   31.606083,   -1.384633,   -0.673739,   1.845629,
        1.558546,    -2.119058,   -17.170010,  27.557066,   -3.220213,   11.703924,   -3.170650,
        10.315322,   15.501976,   -0.062938,   17.604362,   25.075909,   14.092209,   -20.077515,
        -4.454720,   3.489434,    -21.284851,  -1.106983,   -20.147039,  -0.038284,   6.729102,
        27.510433,   -12.301665,  28.757740,   14.841049,   4.924163,    48.799351,   15.032372,
        -2.264645,   12.300248,   19.947533,   11.864894,   9.379414,    -8.700356,   0.706169,
        -21.981613,  -0.584416,   -7.081967,   -15.371056,  -9.369507,   -22.118027,  -39.911331,
        6.740468,    -5.583827,   -3.179766,   -5.307326,   -29.355488,  0.426496,    -10.739164,
        -20.107239,  -1.384034,   9.705546,    1.788639,    -3.918761,   -6.542902,   -7.398474,
        -26.429665,  -5.372433,   29.673561,   29.419210,   17.622681,   -1.045506,   8.707868,
        -2.003571,   -14.089939,  -5.314452,   33.169868,   46.093655,   25.593622,   21.127714,
        24.418570,   7.096861,    4.259159,    7.994281,    33.650776,   30.414579,   16.926060,
        -5.645188,   3.710554,    -8.403540,   -9.268316,   18.363314,   35.833424,   16.653770,
        17.102154,   5.399143,    -2.148757,   -2.801421,   -0.608170,   8.587828,    -7.170149,
        17.668999,   1.279131,    11.981798,   2.693407,    18.935722,   -7.471417,   20.161308,
        -104.207352, -9.290430,   -66.994652,  -33.142738,  -86.076622,  -76.830215,  -42.527481,
        53.978951,   26.321571,   11.621833,   -31.548389,  -4.382818,   -2.115708,   -35.431267,
        -87.809067,  -178.436493, 35.966820,   -30.675997,  17.671406,   -16.139757,  3.832942,
        -19.479494,  20.920795,   7.652409,    -36.115627,  27.232544,   6.702828,    21.404934,
        3.915195,    7.462448,    25.224430,   20.356331,   -15.058910,  27.784672,   25.062538,
        58.167816,   31.558262,   42.954330,   72.039665,   8.501147,    -2.414413,   44.460300,
        79.524353,   55.233471,   7.491140,    4.176668,    -80.034401,  50.704567,   -56.076710,
        74.422966,   57.792473,   21.984367,   66.140266,   42.509438,   -11.962050,  -35.928200,
        14.333480,   -19.432878,  74.602074,   51.026012,   11.570323,   23.788343,   89.946907,
        -25.571493,  -4.444468,   -56.889282,  -17.168547,  21.776598,   -28.792233,  -13.999318,
        -39.297775,  -71.330238,  -9.238435,   2.573959,    -1.799052,   22.437738,   18.609131,
        4.374369,    3.581447,    -33.106239,  -2.200096,   -13.569968,  10.984990,   22.466175,
        31.175817,   17.087778,   11.610218,   -9.273830,   5.455758,    19.158653,   26.026192,
        43.018028,   38.586239,   30.249393,   43.000477,   7.046563,    18.447819,   74.503670,
        42.948032,   69.367599,   46.417377,   69.658234,   59.522141,   53.329170,   20.308249,
        58.311382,   69.207199,   70.664093,   80.231483,   79.995087,   114.254555,  69.288773,
        1.168542,    48.344933,   51.092262,   48.822334,   76.258949,   57.491039,   53.650555,
        64.642479,   -62.938862,  -5.637473,   -22.107178,  -27.245207,  -95.367897,  25.969915,
        22.936062,   -93.728554,  0.000000,    90.000000,   94.012787,   50.759979,   29.148914,
        5.188932,    9.285789,    19.523348,   9.888518,    -37.196251,  -21.369431,  -15.607470,
        -5.860050,   0.000000,    8.873368,    19.293268,   21.701496,   33.136879,   48.659569,
        -1.816882,   -11.283585,  16.588543,   18.313189,   -57.324364,  -38.011932,  -20.608379,
        -8.691701,   -6.055903,   0.000000,    10.428418,   20.658403,   23.619085,   -53.339462,
        -18.954191,  -5.742406,   -2.039969,   0.550106,    0.000000,    4.508555,    7.398082,
        13.340148,   4.067028,    0.000000,    0.000000,    2.597536,    4.802293,    1.273016,
        0.000000,    0.000000,    0.000000,    3.957913,    1.009391,    5.140592,    0.000000};

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{:>6.1f}, ", value);
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <typename T, std::size_t N>
std::string arrayToString(const std::array<T, N>& valueArray) {
    std::string inner =
            valueArray
            | std::ranges::views::transform([](const T& v) { return std::format("{:>6.1f}", v); })
            | std::ranges::views::join_with(std ::string(", ")) | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "pieceValuesEarly: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.pieceValuesEarly[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValuesLate: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.pieceValuesLate[pieceIdx]);
    }
    oss << "}\n";

    oss << "\nphaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceSquareTablesWhiteEarly: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhiteEarly, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhiteLate: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhiteLate, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format("\ndoubledPawnPenalty:\n\t{:>6.1f}", params.doubledPawnPenalty);

    oss << std::format("\nisolatedPawnPenalty:\n\t{:>6.1f}", params.isolatedPawnPenalty);

    oss << std::format("\nbadBishopPenalty:\n\t{}", arrayToString(params.badBishopPenalty));

    oss << std::format("\nbishopPairBonus:\n\t{:>6.1f}", params.bishopPairBonus);

    oss << std::format("\nknightPairPenalty:\n\t{:>6.1f}", params.knightPairPenalty);

    oss << std::format("\nrookPairPenalty:\n\t{:>6.1f}", params.rookPairPenalty);

    oss << std::format("\nrookSemiOpenFileBonus:\n\t{:>6.1f}", params.rookSemiOpenFileBonus);

    oss << std::format("\nrookOpenFileBonus:\n\t{:>6.1f}", params.rookOpenFileBonus);

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{:>6.1f}", params.kingVirtualMobilityPenalty);

    oss << std::format("\nmobilityBonusEarly:\n\t{}", arrayToString(params.mobilityBonusEarly));

    oss << std::format("\nmobilityBonusLate:\n\t{}", arrayToString(params.mobilityBonusLate));

    return oss.str();
}
