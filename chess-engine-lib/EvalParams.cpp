#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        92.987549,   372.529633,  366.702881,  488.266815,  1435.912231, 0.000000,    70.205811,
        257.731323,  273.902618,  492.836273,  611.526550,  0.000000,    0.204272,    1.000000,
        1.892669,    3.755643,    8.460752,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -31.678335,  -22.030577,
        -23.493578,  -10.053144,  -5.176189,   18.610435,   29.928122,   -10.082994,  -24.913628,
        -14.366746,  -10.042213,  -4.311968,   -3.256732,   14.870330,   34.245960,   6.042449,
        -19.987534,  -7.488438,   -0.207522,   21.072880,   8.732227,    17.386133,   -5.737349,
        -15.423684,  -11.452460,  -8.060083,   -7.756968,   12.678053,   25.679625,   8.589681,
        6.387151,    -14.114745,  -4.709547,   14.051038,   -1.130098,   16.484964,   56.705254,
        73.529915,   132.698135,  76.952103,   162.936050,  175.494919,  33.657719,   114.429939,
        79.754684,   59.576710,   -35.467682,  -47.301144,  0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -161.718552, -22.726032,
        -41.253269,  -24.181591,  -25.611645,  -1.076044,   -19.877069,  -188.751663, -33.843563,
        -67.059158,  -39.581211,  -4.582633,   -10.974105,  12.599688,   -30.019550,  -54.033077,
        -36.981655,  -15.027687,  -1.748584,   9.830388,    32.110832,   4.048512,    12.771892,
        -43.796413,  -15.712362,  -4.893863,   9.607300,    1.787472,    21.585291,   9.564899,
        15.214591,   0.627701,    -17.891890,  -2.678365,   36.039509,   64.018593,   10.415559,
        44.021732,   -16.766577,  7.377215,    22.170130,   19.017929,   65.330818,   81.782257,
        111.863129,  96.857445,   -17.011440,  -7.795658,   -132.015900, -40.533195,  -12.239929,
        62.080048,   4.767676,    -0.603575,   -31.441179,  8.531807,    -157.208221, -103.784882,
        -12.365514,  -668.205872, -99.740501,  -262.778198, 179.553528,  -252.185471, -45.521233,
        16.335119,   3.530936,    -24.016598,  -2.758690,   -12.653102,  -9.043650,   -7.160929,
        17.309683,   6.469255,    10.457737,   1.674485,    -3.778408,   14.533835,   16.406242,
        -31.374321,  1.450876,    14.050138,   6.168777,    0.708933,    -0.039126,   -0.927387,
        9.816225,    -11.809745,  12.342938,   -4.435242,   -10.593409,  38.038506,   6.321698,
        -9.622951,   -15.956822,  0.547889,    -8.356063,   -14.268075,  3.746508,    7.970154,
        38.922821,   -27.130306,  -28.286827,  -60.646549,  -24.665522,  -9.798600,   21.476460,
        22.074318,   23.652634,   99.884834,   72.121773,   24.329773,   18.788195,   -37.312775,
        -6.955139,   -10.709427,  -1.050718,   -59.718967,  -20.008392,  -76.245613,  -149.354431,
        -55.895359,  -45.441895,  -69.742119,  22.275820,   -146.958435, 105.902084,  24.396194,
        18.454832,   10.259354,   -1.248723,   2.174761,    -6.343649,   -5.378145,   -15.704894,
        -9.787318,   -43.894470,  -31.193192,  -29.360981,  -22.588419,  -11.283300,  -23.890085,
        -37.910721,  -55.411861,  -16.069838,  -37.185635,  -28.927860,  -27.336193,  -30.285442,
        -30.168091,  -7.419463,   -45.694336,  -40.103130,  -46.464539,  -37.837620,  -20.697338,
        -45.959671,  -19.190228,  -26.861917,  -24.297079,  -35.462227,  -47.320023,  -18.528107,
        -18.069342,  -78.443436,  2.727642,    -25.829840,  -75.662048,  -10.858975,  -22.685186,
        -10.300174,  5.191439,    15.000447,   46.334351,   81.055130,   -29.849802,  -25.028242,
        11.775220,   6.731966,    12.245727,   58.854126,   75.519737,   42.840816,   34.678719,
        32.343006,   26.598150,   44.803944,   18.079243,   50.577602,   48.783253,   98.786797,
        24.322771,   50.840622,   8.752700,    18.019430,   32.899384,   37.226562,   11.932464,
        0.861615,    -75.670364,  -53.021912,  -26.008041,  13.821548,   6.916373,    5.335848,
        18.117174,   -0.196319,   -2.565877,   -38.974182,  -27.504627,  -29.799932,  -18.547239,
        -11.350135,  -12.789207,  -13.029424,  -25.578859,  -31.572765,  -30.469744,  -57.651020,
        -49.675362,  -37.291183,  -23.371103,  -38.788033,  -36.896534,  -25.719589,  -44.765583,
        -51.979126,  -73.846199,  -61.325974,  -56.000290,  -65.494789,  -41.346771,  -15.907955,
        -35.296997,  -61.498425,  -64.632057,  -29.709257,  3.523246,    45.242836,   -56.176308,
        -9.869235,   -62.939667,  -58.312981,  -47.443157,  -75.176567,  -54.500896,  -29.895845,
        13.821490,   -5.971700,   11.903316,   -95.423576,  -47.790874,  31.608221,   55.359482,
        -87.830147,  47.853630,   -44.045258,  41.715649,   -1.025392,   -122.263031, -11.763355,
        -51.529434,  7.090481,    -20.573641,  -29.539112,  -42.527615,  -20.023703,  -25.940453,
        -18.511385,  20.398659,   27.748844,   19.318727,   -110.072311, 5.431343,    -1.765378,
        -7.463239,   -0.690586,   14.429929,   -11.795081,  -19.614336,  -4.730262,   -31.797047,
        16.123705,   -30.231319,  -20.313303,  28.059410,   -40.049393,  -57.636665,  39.012032,
        -67.697701,  17.792591,   -125.724503, 1.659781,    -29.572691,  1.344434,    -19.408092,
        59.170918,   33.415104,   17.092644,   -104.778870, -153.362518, -87.114601,  -146.996826,
        -59.252518,  -1.507618,   19.110527,   29.343805,   35.398689,   -82.604645,  -70.396553,
        -48.881439,  -163.468582, 110.068542,  105.969208,  94.137039,   48.680992,   162.134964,
        21.864195,   11.969246,   -80.406807,  0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    15.748507,   4.891644,    5.103498,
        -104.546188, -57.268227,  -2.398913,   -15.040660,  -7.054462,   15.618788,   -3.297596,
        1.136303,    0.507884,    -6.271580,   -0.441521,   -18.279175,  -1.239974,   12.348765,
        7.888341,    -6.189713,   -23.834654,  -11.591794,  -4.889686,   -1.335696,   0.479214,
        41.361313,   23.340536,   10.180617,   -4.328348,   -13.197331,  -1.526499,   7.727796,
        11.599140,   48.721882,   13.831962,   31.665384,   -5.473440,   -27.430815,  -26.432858,
        -8.787148,   -26.147371,  69.281082,   53.765026,   75.293114,   50.549164,   62.783619,
        65.321922,   124.990028,  101.701920,  0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    -35.189495,  -105.366951, -19.977625,
        -33.059036,  -46.549370,  -37.527695,  -38.959366,  -16.575727,  -45.569546,  5.339054,
        -24.562943,  -6.169148,   -10.506688,  -21.345448,  -41.195831,  -7.867344,   -41.960728,
        -11.539399,  5.090894,    -2.282367,   4.827307,    -18.179123,  -19.279408,  23.926096,
        -24.131989,  8.233517,    18.153156,   26.571323,   13.950177,   20.307835,   2.647747,
        -7.441607,   -16.374685,  20.161882,   15.814877,   25.198980,   31.297050,   24.916262,
        30.112066,   -1.982942,   -18.498587,  4.249430,    7.341195,    20.335365,   -5.269883,
        -0.368630,   20.139429,   3.713914,    31.070375,   2.834559,    14.355465,   18.860226,
        0.050103,    4.772133,    -16.301077,  0.178575,    -62.831982,  -44.174168,  -18.107574,
        80.968140,   24.395809,   37.604843,   -35.385483,  -53.336540,  3.758401,    -36.987404,
        -41.511803,  -5.686666,   -25.954479,  -42.094048,  -26.942808,  -17.522322,  -45.530380,
        -23.849194,  -16.192995,  -4.563079,   -9.559586,   -7.920052,   -31.341547,  -53.281902,
        -10.139021,  4.835288,    4.693360,    6.983047,    11.812853,   -2.298175,   -10.303473,
        -28.344168,  -5.428844,   -0.219987,   36.371887,   7.495294,    8.120683,    10.879488,
        10.535320,   0.691956,    -17.530399,  22.979374,   8.427908,    25.117636,   12.378119,
        20.902182,   26.892788,   18.187588,   14.872773,   25.883221,   19.226898,   -1.932130,
        6.194531,    14.369721,   -8.672653,   11.247272,   -23.207151,  -0.915665,   15.930770,
        32.424068,   5.041322,    32.095505,   14.266133,   9.879588,    54.305912,   15.804317,
        0.893264,    22.363707,   14.277119,   27.189100,   5.185386,    -12.211982,  -29.940964,
        -42.261898,  -15.875663,  -16.786547,  -20.267899,  -15.193862,  -22.746811,  -44.623158,
        -5.505858,   -13.537826,  -8.242448,   -6.347184,   -24.028362,  1.655999,    -10.182996,
        -20.819324,  -11.800082,  3.585610,    2.413000,    -1.918621,   1.089223,    2.681412,
        -16.685444,  1.721317,    19.777306,   28.434397,   24.250206,   10.895378,   25.472246,
        12.982116,   0.426934,    8.001626,    30.420170,   47.254379,   36.514740,   32.738678,
        50.722218,   27.395767,   19.624331,   30.284962,   30.276360,   34.986298,   32.498753,
        19.380314,   26.858347,   10.114984,   6.238467,    24.646805,   38.626701,   29.156147,
        38.317829,   32.584450,   22.585320,   15.972212,   21.613424,   20.229383,   -2.688890,
        18.124073,   17.504745,   29.566492,   22.047668,   32.373444,   8.934141,    19.292501,
        -106.290840, -14.772673,  -80.168892,  -44.432240,  -89.799477,  -82.141457,  -52.225132,
        5.538378,    15.190512,   10.414015,   -46.796642,  -17.746138,  -16.321486,  -53.924999,
        -90.819054,  -136.053574, 44.968525,   -16.258429,  15.191942,   -18.489302,  -6.671408,
        -21.772673,  6.385996,    -1.647772,   16.701468,   17.857347,   31.645033,   29.271093,
        5.469072,    -4.667494,   7.773417,    15.060884,   10.666159,   35.907085,   38.977680,
        56.341900,   30.294195,   38.764957,   70.592773,   24.111078,   -2.206244,   44.563747,
        79.302361,   56.983887,   16.924494,   10.475996,   -61.531010,  71.695953,   -9.824003,
        92.041687,   69.591919,   33.077110,   75.231346,   56.651173,   13.146112,   -26.512777,
        43.659359,   -7.879011,   89.075333,   58.771904,   -6.747488,   3.561632,    90.013268,
        -34.079670,  5.238518,    -48.186661,  -14.200736,  21.092617,   -21.944532,  -6.907103,
        -25.166344,  -43.233025,  -9.543453,   -3.950744,   -11.186688,  13.300267,   8.096165,
        -0.962382,   -3.320477,   -32.567112,  -9.019369,   -21.447285,  4.531846,    16.897106,
        23.836079,   12.042451,   2.364402,    -9.142374,   -9.912313,   8.147481,    18.123064,
        36.878738,   32.414200,   19.939600,   27.067423,   -3.847903,   -0.877357,   51.743401,
        28.818592,   50.304512,   38.054443,   49.713631,   43.198383,   24.653532,   -5.649318,
        35.712097,   46.463303,   50.756485,   64.048737,   64.050369,   86.023483,   37.397419,
        -12.859459,  32.008240,   21.530024,   26.625557,   51.605186,   39.077782,   39.433723,
        33.466160,   -56.458927,  -15.224866,  -23.394005,  -41.284531,  -66.549278,  1.903144,
        0.785223,    -66.036049,  0.000000,    90.000000,   63.865925,   22.576147,   -1.927820,
        -1.580544,   7.807025,    0.000000,    90.000000,   100.371582,  62.317764,   42.034801,
        10.759172,   13.085887,   21.630812,   9.914868,    12.613253,   8.332212,    24.976961,
        13.834566,   11.575265,   2.454463,    0.000000,    -3.504997,   -15.538159,  -19.144060,
        -31.020481,  43.957085,   19.437069,   12.035253,   6.150906,    0.000000,    -13.756856,
        -25.425751,  -16.158413,  -93.875481,  10.730632,   84.773643,   2.496574,    1.793380,
        -14.480775,  10.830163,   14.827243,   21.029871,   37.168201,   -1.139895,   -311.351318,
        33.744381,   -23.257307,  -1.014861,   0.000000,    0.033465,    3.157012,    2.368879,
        -1.442886,   -20.092670,  -39.631855,  -8.657331,   0.598823,    0.000000,    11.805862,
        27.305449,   42.261169,   86.006607,   272.223907,  62.495869,   -11.759315,  -6.511012,
        0.000000,    -4.843368,   -5.363904,   -0.256639,   2.075482,    -132.410873, -49.437866,
        -9.196445,   -2.822017,   0.000000,    7.383277,    18.442924,   16.558420,   20.285189,
        2.271959,    1.873372,    0.000000,    -1.210171,   2.497885,    3.257627,    1.050896,
        0.000000,    0.000000,    1.962918,    3.469096,    2.111181,    4.495433,    0.000000,
        0.000000,    5.026617,    3.251351,    6.662589,    21.524109,   0.000000,    0.000000,
        -4.285107,   -4.018998,   -5.668722,   4.685893,    0.000000};

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{:>6.1f}, ", value);
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <typename T, std::size_t N>
std::string arrayToString(const std::array<T, N>& valueArray) {
    std::string inner =
            valueArray
            | std::ranges::views::transform([](const T& v) { return std::format("{:>6.1f}", v); })
            | std::ranges::views::join_with(std ::string(", ")) | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "pieceValuesEarly: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.pieceValuesEarly[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValuesLate: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.pieceValuesLate[pieceIdx]);
    }
    oss << "}\n";

    oss << "\nphaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceSquareTablesWhiteEarly: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhiteEarly, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhiteLate: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhiteLate, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonusEarly:\n\t{}", arrayToString(params.passedPawnBonusEarly));

    oss << std::format("\npassedPawnBonusLate:\n\t{}", arrayToString(params.passedPawnBonusLate));

    oss << std::format("\ndoubledPawnPenaltyEarly:\n\t{:>6.1f}", params.doubledPawnPenaltyEarly);

    oss << std::format("\ndoubledPawnPenaltyLate:\n\t{:>6.1f}", params.doubledPawnPenaltyLate);

    oss << std::format("\nisolatedPawnPenaltyEarly:\n\t{:>6.1f}", params.isolatedPawnPenaltyEarly);

    oss << std::format("\nisolatedPawnPenaltyLate:\n\t{:>6.1f}", params.isolatedPawnPenaltyLate);

    oss << std::format(
            "\nbishopPawnSameColorBonusEarly:\n\t{}",
            arrayToString(params.bishopPawnSameColorBonusEarly));

    oss << std::format(
            "\nbishopPawnSameColorBonusLate:\n\t{}",
            arrayToString(params.bishopPawnSameColorBonusLate));

    oss << std::format("\nbishopPairBonusEarly:\n\t{:>6.1f}", params.bishopPairBonusEarly);

    oss << std::format("\nbishopPairBonusLate:\n\t{:>6.1f}", params.bishopPairBonusLate);

    oss << std::format("\nknightPairBonusEarly:\n\t{:>6.1f}", params.knightPairBonusEarly);

    oss << std::format("\nknightPairBonusLate:\n\t{:>6.1f}", params.knightPairBonusLate);

    oss << std::format("\nrookPairBonusEarly:\n\t{:>6.1f}", params.rookPairBonusEarly);

    oss << std::format("\nrookPairBonusLate:\n\t{:>6.1f}", params.rookPairBonusLate);

    oss << std::format(
            "\nrookSemiOpenFileBonusEarly:\n\t{:>6.1f}", params.rookSemiOpenFileBonusEarly);

    oss << std::format(
            "\nrookSemiOpenFileBonusLate:\n\t{:>6.1f}", params.rookSemiOpenFileBonusLate);

    oss << std::format("\nrookOpenFileBonusEarly:\n\t{:>6.1f}", params.rookOpenFileBonusEarly);

    oss << std::format("\nrookOpenFileBonusLate:\n\t{:>6.1f}", params.rookOpenFileBonusLate);

    oss << std::format(
            "\nknightPawnAdjustmentEarly:\n\t{}", arrayToString(params.knightPawnAdjustmentEarly));

    oss << std::format(
            "\nknightPawnAdjustmentLate:\n\t{}", arrayToString(params.knightPawnAdjustmentLate));

    oss << std::format(
            "\nrookPawnAdjustmentEarly:\n\t{}", arrayToString(params.rookPawnAdjustmentEarly));

    oss << std::format(
            "\nrookPawnAdjustmentLate:\n\t{}", arrayToString(params.rookPawnAdjustmentLate));

    oss << std::format(
            "\nkingVirtualMobilityPenaltyEarly:\n\t{:>6.1f}",
            params.kingVirtualMobilityPenaltyEarly);

    oss << std::format(
            "\nkingVirtualMobilityPenaltyLate:\n\t{:>6.1f}", params.kingVirtualMobilityPenaltyLate);

    oss << std::format("\nmobilityBonusEarly:\n\t{}", arrayToString(params.mobilityBonusEarly));

    oss << std::format("\nmobilityBonusLate:\n\t{}", arrayToString(params.mobilityBonusLate));

    oss << std::format(
            "\nkingTropismBonusEarly:\n\t{}", arrayToString(params.kingTropismBonusEarly));

    oss << std::format("\nkingTropismBonusLate:\n\t{}", arrayToString(params.kingTropismBonusLate));

    return oss.str();
}
