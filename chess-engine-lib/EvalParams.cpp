#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        0.204272,    1.000000,    1.892669,    3.755643,    8.460752,    0.000000,    101.117790,
        82.755951,   417.102051,  264.466156,  427.820831,  268.595825,  574.363647,  501.597290,
        1743.178467, 579.381531,  0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -21.226871,
        18.155939,   -23.539463,  7.332702,    -27.723463,  12.392820,   -17.269760,  -56.688427,
        -5.565001,   -3.382716,   14.368990,   -5.987619,   40.121506,   -11.434931,  -17.228760,
        -9.635957,   -19.036945,  15.975530,   -17.126974,  0.179926,    -9.429484,   0.568136,
        -3.614474,   -2.338126,   -13.816656,  -4.366193,   13.817316,   -3.684885,   42.944084,
        -21.026228,  -1.338511,   -6.781229,   -10.321974,  8.329610,    -8.229785,   15.540105,
        -5.607483,   2.535232,    13.394818,   -20.402002,  0.792437,    -11.212919,  14.974463,
        -8.290551,   -4.471477,   0.381048,    -11.977887,  -2.880743,   -11.945044,  45.872746,
        3.308465,    25.713243,   -9.098618,   11.559526,   9.931917,    -7.410124,   18.358639,
        -7.925703,   2.599547,    -5.274724,   -14.587297,  8.321798,    -14.155896,  0.530180,
        3.048354,    51.454697,   35.529240,   16.822695,   -7.855843,   24.631218,   -0.146267,
        1.837979,    44.614601,   -20.677582,  76.796494,   -6.374031,   123.762573,  -7.077801,
        98.549484,   -24.289049,  216.303009,  61.348606,   173.722046,  70.332352,   78.168709,
        67.305389,   159.900269,  47.029678,   77.530106,   83.532646,   -3.995851,   95.049507,
        43.557858,   121.169106,  42.882683,   96.019531,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -174.665100,
        -2.781252,   -36.850204,  -65.238174,  -76.020149,  -7.736390,   -47.720203,  -7.581839,
        -41.089962,  -29.397594,  -21.009689,  -27.852560,  -51.867229,  -64.978920,  -227.824677,
        -32.476585,  -51.838257,  -35.332661,  -46.212833,  -16.308760,  -34.803478,  -15.047101,
        -4.806149,   6.632512,    -10.702015,  -2.751328,   -4.690927,   -5.007814,   -33.384754,
        -66.393707,  -59.062981,  -7.123451,   -49.811432,  -44.098713,  -18.913834,  7.436733,
        -7.243319,   7.884733,    5.773059,    2.916976,    52.228489,   3.502843,    6.143277,
        -25.901562,  13.389193,   -32.217541,  -55.540955,  32.129879,   -10.774075,  -25.360769,
        -27.846436,  7.244922,    26.386990,   21.673616,   -0.130331,   33.732620,   18.811638,
        25.556421,   23.630634,   11.575832,   7.462980,    6.739478,    7.188714,    -11.390093,
        -29.313889,  -6.071329,   15.676939,   0.056873,    56.100876,   11.361773,   61.864437,
        25.653576,   29.258125,   22.400551,   69.856079,   15.122929,   8.388441,    7.738042,
        21.887653,   -15.729265,  43.535080,   -29.951040,  7.250436,    -1.942268,   38.519405,
        29.468510,   88.875160,   4.832899,    94.055450,   -17.888351,  116.988274,  -11.792638,
        0.358366,    39.861813,   4.455365,    -5.124334,   -87.360245,  -10.438474,  -52.394512,
        -1.240506,   -12.266504,  17.652197,   68.641922,   0.247726,    24.760380,   11.689245,
        52.540821,   -7.489821,   -0.126083,   -15.264832,  90.060555,   -47.299595,  -186.757401,
        -64.586487,  -245.493683, -23.192064,  -12.491955,  -43.256657,  -82.753349,  -6.123990,
        -69.884094,  12.648966,   -200.919327, 9.682366,    56.183350,   -38.413097,  -242.807953,
        -18.472517,  6.671246,    -29.026239,  11.090078,   -40.150974,  -0.099570,   -33.411674,
        -7.531953,   -7.073594,   30.505342,   -35.844528,  -24.605116,  -37.183804,  -66.414162,
        1.995822,    0.859291,    -15.227889,  21.932045,   -38.148731,  10.638856,   -16.372545,
        19.356697,   -19.547165,  0.137459,    0.533906,    0.466923,    -23.878353,  2.150590,
        -13.946161,  22.813984,   -31.722214,  -30.909985,  -35.493881,  11.855549,   -15.694937,
        11.360634,   4.243432,    11.799398,   -7.665582,   -1.959686,   0.341645,    4.523601,
        4.946977,    8.483576,    0.186059,    2.848886,    -3.151320,   12.741820,   -45.132713,
        5.433831,    -6.824441,   -16.620358,  13.574643,   -13.434430,  25.906572,   35.999451,
        7.539118,    7.723757,    3.366780,    -5.385992,   6.474364,    -4.318138,   20.444088,
        5.387752,    -35.418861,  -4.332522,   -3.820915,   -28.852459,  19.720232,   15.751142,
        9.086737,    15.633037,   16.533192,   36.286285,   13.053076,   -6.601620,   3.238773,
        -34.473301,  24.619257,   -65.599831,  36.919308,   -19.211926,  9.760888,    14.270060,
        15.437831,   -3.573021,   24.944435,   7.411534,    3.404296,    21.169092,   18.679022,
        100.358376,  10.080068,   97.244690,   -7.849323,   25.967796,   1.801491,    11.117085,
        -10.351927,  -36.178844,  17.752365,   5.289758,    12.855234,   -8.692654,   34.134556,
        -21.970139,  26.564791,   -59.635334,  35.654949,   -71.436409,  28.963078,   -92.651199,
        45.801910,   -144.572784, 87.810684,   18.454195,   5.961576,    31.475636,   -11.647975,
        -35.492229,  16.278658,   -85.345993,  30.295206,   -94.444893,  22.634172,   210.500763,
        -6.208839,   12.541121,   -16.142645,  26.584862,   -30.665937,  14.759336,   -33.519245,
        -3.004111,   -16.350220,  -1.536994,   -18.745661,  -7.793361,   -22.673605,  -11.838680,
        -10.862990,  -9.828465,   -19.872293,  -15.351832,  -43.628204,  -40.604916,  1.429953,
        -16.824160,  -20.220501,  -28.144333,  -11.382083,  -15.997826,  -4.683962,   -10.714343,
        -18.445564,  -40.487892,  -1.832564,   -43.575272,  -14.776021,  -45.717365,  -17.470850,
        -17.546074,  -9.942409,   -42.524353,  6.730356,    -44.834446,  13.163384,   -27.866404,
        -11.386844,  -49.172085,  3.008030,    -40.910957,  -15.145391,  -24.563086,  -17.202837,
        -52.496941,  4.412538,    -40.745216,  11.921453,   -40.496883,  18.688572,   -47.610806,
        24.936142,   -20.832493,  13.928169,   -50.603012,  15.821684,   -50.714565,  12.348243,
        -37.873539,  3.882987,    -56.592869,  23.059349,   -47.459732,  23.202124,   -38.737274,
        27.348831,   -42.116371,  27.454559,   -19.053377,  17.159544,   -113.742447, 54.958054,
        -0.478101,   11.074956,   -32.294910,  17.101562,   -85.014191,  38.741768,   -8.800613,
        26.907631,   -27.182064,  26.478979,   -23.102194,  17.000767,   -4.127047,   14.390133,
        7.230258,    16.873030,   32.825684,   -4.573682,   97.725723,   -9.439221,   -20.190495,
        13.659153,   -16.989410,  27.841574,   0.255324,    30.774910,   10.124730,   29.469540,
        18.350910,   27.356327,   23.142143,   27.921909,   55.544933,   19.643215,   73.839005,
        12.585240,   71.273193,   3.564379,    12.109004,   -2.767902,   -0.188701,   29.006262,
        5.469941,    32.286942,   42.652523,   24.035946,   7.711676,    51.524628,   81.462189,
        27.885313,   145.308945,  -2.037088,   -12.070242,  21.932617,   39.241966,   -88.628975,
        21.352896,   -60.834152,  11.973407,   -50.820278,  31.644510,   -45.171585,  47.473358,
        -101.077896, 38.059853,   -152.216751, -5.150238,   -75.124100,  -97.415337,  0.296373,
        -21.785774,  -2.371305,   -31.375738,  41.738541,   0.379973,    -21.581980,  1.746451,
        -11.670020,  11.158469,   -34.036804,  21.116766,   -102.008324, 31.867376,   -161.803619,
        -14.384402,  -166.556046, -15.487934,  -27.314314,  -33.029503,  3.197620,    -41.147263,
        22.813602,   -24.227282,  -3.850181,   -14.393592,  -29.895411,  -25.802917,  0.045560,
        0.653868,    -37.432976,  -31.129194,  -27.711214,  -31.104837,  0.768157,    -15.543207,
        -32.939842,  -64.916748,  34.713043,   -51.682392,  30.647469,   -59.059174,  25.334137,
        -27.143387,  19.721794,   -51.300838,  33.619217,   -45.528416,  32.266434,   -46.545147,
        38.911919,   -42.630825,  47.973591,   -70.532227,  81.082817,   -76.790001,  33.531044,
        -55.561893,  39.164204,   -61.305683,  32.757332,   -73.980438,  86.808693,   -47.575134,
        35.368870,   12.736567,   -31.298016,  -18.318213,  -6.323167,   -65.855614,  47.046474,
        -102.996063, 76.676292,   -90.213318,  89.055275,   28.510386,   -9.009596,   3.113370,
        -29.774643,  -57.942928,  58.096478,   -2.972924,   1.505336,    -76.681419,  96.387260,
        -48.567291,  61.523273,   -100.404633, 90.291458,   -98.189224,  102.271919,  -87.846428,
        80.608223,   -39.901436,  27.295307,   2.197533,    18.974430,   -4.116384,   42.746170,
        42.351425,   -6.906247,   -83.640968,  87.800705,   -83.579323,  74.670380,   -11.488818,
        33.396435,   227.377853,  -134.953857, -10.334392,  61.527996,   300.983185,  -163.319672,
        -39.250286,  -14.342380,  28.603577,   -43.453724,  -13.287926,  -12.652263,  -86.784866,
        -1.988168,   -0.841985,   -26.372072,  -67.374809,  0.492931,    5.705244,    -29.156979,
        -36.270069,  -44.702938,  -33.863689,  -23.489605,  -42.005547,  -6.545055,   -6.922714,
        -9.510200,   -20.174118,  14.766193,   8.077544,    1.087636,    21.731834,   -0.359711,
        22.269598,   -1.946624,   8.847919,    -36.830894,  -121.593063, -5.336435,   -11.989636,
        -19.239754,  29.916286,   -9.674771,   23.628716,   20.528244,   -17.658628,  26.177830,
        -0.281907,   13.201313,   -4.524899,   -2.022313,   -61.194801,  0.996585,    36.689266,
        -25.771877,  -37.569420,  10.870975,   11.372650,   26.133369,   14.693778,   24.606291,
        22.038778,   23.161612,   -13.658893,  26.009838,   -34.481705,  17.108007,   -18.880060,
        -15.287655,  -101.131752, 14.520518,   -119.458084, 58.292130,   -76.809723,  45.142780,
        -106.048485, 52.286804,   -106.267090, 43.343529,   -76.366943,  45.470741,   -13.562096,
        31.387323,   -18.054867,  14.996992,   90.207237,   -19.239565,  21.915510,   29.473497,
        -5.530920,   44.342762,   -125.721382, 63.457050,   -160.717117, 64.439987,   -67.186958,
        59.754982,   -176.858948, 78.080627,   -186.042847, 38.263809,   -90.704208,  45.819534,
        -137.309250, 44.155659,   43.987934,   17.830498,   -32.341702,  41.002728,   -7.022219,
        43.293461,   -5.940233,   29.358109,   -126.102730, 58.653706,   -368.647552, 30.115965,
        189.459045,  -0.710514,   118.363556,  -0.021385,   39.358658,   -10.191978,  167.647842,
        -50.336819,  129.738602,  -40.376919,  44.931629,   2.107210,    -1.993261,   29.479387,
        -444.951141, -18.274326,  0.000000,    0.000000,    90.000000,   90.000000,   80.313393,
        109.287971,  40.798397,   62.197247,   -1.611801,   42.013294,   -3.082042,   12.537342,
        2.458683,    12.508333,   21.235771,   13.607303,   12.770713,   8.617758,    45.587185,
        -18.903971,  5.181239,    17.146160,   4.064474,    20.406019,   -2.975315,   11.076493,
        0.000000,    0.000000,    0.697040,    -12.663230,  -13.062984,  -10.397749,  -30.315800,
        45.743019,   -88.355659,  -74.631042,  21.170399,   68.848564,   8.910038,    8.942573,
        -21.423973,  2.907224,    23.723185,   15.612280,   37.022434,   3.331041,    -295.083099,
        -26.814083,  74.979950,   -42.942436,  4.153521,    -4.438494,   14.999218,   -2.811947,
        0.000000,    0.000000,    17.386366,   8.302362,    13.920173,   23.099007,   9.007453,
        48.643818,   7.292329,    80.447495,   214.602737,  -113.312225, 35.042870,   -44.577541,
        -1.292805,   -18.321659,  -14.315214,  -3.885087,   0.000000,    0.000000,    -21.616899,
        20.371166,   -15.514664,  32.158436,   -8.635001,   38.025024,   2.870132,    45.706947,
        2.958147,    1.663640,    0.000000,    0.000000,    0.645284,    0.447478,    3.884553,
        4.468425,    3.691828,    3.028666,    1.527023,    5.489528,    0.000000,    0.000000,
        0.000000,    0.000000,    3.401708,    -2.797056,   4.462903,    -4.452523,   11.230099,
        -7.798068,   27.134205,   1.454050,    0.000000,    0.000000,    20.000000,   10.000000,
        4.609717,    -2.498606,   -5.140395,   -51.368744,  17.040779,   -24.390882,  10.460784,
        7.314277,    -58.992725,  -29.163691,  -1.803520,   -18.847269,  5.632636,    6.559880,
        -29.841702,  -40.107315,  -14.526879,  -15.712173,  4.334228,    11.464397,   -60.825615,
        -8.646298,   -13.193795,  -3.851220,   4.451163,    17.371532,   -69.118965,  -36.104992,
        -57.680122,  -6.608721};

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorBonus:\n\t{}", arrayToString(params.bishopPawnSameColorBonus));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    oss << "\nkingTropismBonus: {\n";
    writeTaperedTermPerPiece(params.kingTropismBonus, oss);
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    return oss.str();
}
